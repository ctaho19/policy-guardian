-- Detailed comparison to find missing records
WITH BASE_RECORDS AS (
    SELECT 
        ACCOUNT_NUMBER,
        REGION,
        ASV,
        RESOURCE_TYPE,
        ROLE_TYPE,
        INVENTORY_COUNT,
        TOTAL_EVALUATIONS_COUNT,
        BATCH_ID
    FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
    AND CONTROL_ID = 'AC-3.AWS.30.v02'
    AND RESOURCE_TYPE = 'AWS::IAM::Role'
    AND ROLE_TYPE = 'MACHINE'
),
RANKED_RECORDS AS (
    SELECT 
        ACCOUNT_NUMBER,
        REGION,
        ASV,
        RESOURCE_TYPE,
        ROLE_TYPE,
        INVENTORY_COUNT,
        TOTAL_EVALUATIONS_COUNT,
        BATCH_ID
    FROM (
        SELECT *,
            ROW_NUMBER() OVER (
                PARTITION BY ACCOUNT_NUMBER, REGION, ASV, RESOURCE_TYPE, ROLE_TYPE
                ORDER BY BATCH_ID DESC
            ) AS RANK
        FROM BASE_RECORDS
    )
    WHERE RANK = 1
)

-- Compare totals
SELECT 
    'BASE' as SOURCE,
    COUNT(*) as RECORD_COUNT,
    SUM(INVENTORY_COUNT) as TOTAL_RESOURCES,
    SUM(TOTAL_EVALUATIONS_COUNT) as EVALUATED_RESOURCES
FROM BASE_RECORDS
UNION ALL
SELECT 
    'RANKED' as SOURCE,
    COUNT(*) as RECORD_COUNT,
    SUM(INVENTORY_COUNT) as TOTAL_RESOURCES,
    SUM(TOTAL_EVALUATIONS_COUNT) as EVALUATED_RESOURCES
FROM RANKED_RECORDS;

-- Find records that might be getting dropped or combined
SELECT 
    b.ACCOUNT_NUMBER,
    b.REGION,
    b.ASV,
    b.RESOURCE_TYPE,
    b.ROLE_TYPE,
    COUNT(*) as RECORD_COUNT,
    SUM(b.INVENTORY_COUNT) as BASE_INVENTORY,
    SUM(b.TOTAL_EVALUATIONS_COUNT) as BASE_EVALUATED,
    MAX(r.INVENTORY_COUNT) as RANKED_INVENTORY,
    MAX(r.TOTAL_EVALUATIONS_COUNT) as RANKED_EVALUATED
FROM BASE_RECORDS b
LEFT JOIN RANKED_RECORDS r ON 
    b.ACCOUNT_NUMBER = r.ACCOUNT_NUMBER
    AND b.REGION = r.REGION
    AND b.ASV = r.ASV
    AND b.RESOURCE_TYPE = r.RESOURCE_TYPE
    AND b.ROLE_TYPE = r.ROLE_TYPE
GROUP BY 
    b.ACCOUNT_NUMBER,
    b.REGION,
    b.ASV,
    b.RESOURCE_TYPE,
    b.ROLE_TYPE
HAVING SUM(b.INVENTORY_COUNT) != MAX(r.INVENTORY_COUNT)
    OR SUM(b.TOTAL_EVALUATIONS_COUNT) != MAX(r.TOTAL_EVALUATIONS_COUNT)
ORDER BY ABS(SUM(b.INVENTORY_COUNT) - MAX(r.INVENTORY_COUNT)) DESC
LIMIT 10;

-- Check for any potential duplicate combinations
SELECT 
    ACCOUNT_NUMBER,
    REGION,
    ASV,
    RESOURCE_TYPE,
    ROLE_TYPE,
    COUNT(*) as RECORD_COUNT,
    STRING_AGG(DISTINCT BATCH_ID::VARCHAR, ', ') as BATCH_IDS,
    SUM(INVENTORY_COUNT) as TOTAL_INVENTORY,
    SUM(TOTAL_EVALUATIONS_COUNT) as TOTAL_EVALUATED
FROM BASE_RECORDS
GROUP BY 
    ACCOUNT_NUMBER,
    REGION,
    ASV,
    RESOURCE_TYPE,
    ROLE_TYPE
HAVING COUNT(*) > 1
ORDER BY COUNT(*) DESC
LIMIT 10;
