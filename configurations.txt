-- Tier 0 (Heartbeat): Monitor certificate rotation compliance
-- This query identifies certificates needing rotation and checks if they are being actively rotated

-- First CTE: Identify certificates that need rotation based on expiration criteria
WITH EXPIRED_CERTS AS (
    SELECT 
        c1.Certificate_ID,
        c1.NOT_VALID_AFTER_UTC_TIMESTAMP as EXPIRY_DATE,
        c1.LAST_USAGE_OBSERVATION_UTC_TIMESTAMP,
        -- Check for rotation
        LEAD(c1.NOT_VALID_BEFORE_UTC_TIMESTAMP) OVER (PARTITION BY c1.Certificate_ID ORDER BY c1.NOT_VALID_BEFORE_UTC_TIMESTAMP) as ROTATION_DATE
    FROM CYBR_DB.PHDP_CYBR.CERTIFICATE_CATALOG_CERTIFICATE_USAGE c1
    WHERE c1.CERTIFICATE_ARN LIKE '%arn:aws:acm%'
    AND c1.NOT_VALID_AFTER_UTC_TIMESTAMP < CURRENT_TIMESTAMP
    AND c1.NOT_VALID_AFTER_UTC_TIMESTAMP >= DATEADD(day, -3, CURRENT_TIMESTAMP)
    AND c1.LAST_USAGE_OBSERVATION_UTC_TIMESTAMP > c1.NOT_VALID_AFTER_UTC_TIMESTAMP
    AND DATEDIFF(day, c1.NOT_VALID_BEFORE_UTC_TIMESTAMP, c1.NOT_VALID_AFTER_UTC_TIMESTAMP) BETWEEN 350 AND 380
)

-- Final output with compliance status
SELECT
    CURRENT_DATE() as DATE,
    'MNTR-1077188-T0' as MONITORING_METRIC_NUMBER,
    -- Metric fails if we find expired certs that were used after expiry without rotation
    CASE 
        WHEN COUNT(CASE WHEN ROTATION_DATE IS NULL OR ROTATION_DATE > EXPIRY_DATE THEN 1 END) > 0 THEN 0
        ELSE 1
    END as MONITORING_METRIC,
    CASE 
        WHEN COUNT(CASE WHEN ROTATION_DATE IS NULL OR ROTATION_DATE > EXPIRY_DATE THEN 1 END) > 0 THEN 'RED'
        ELSE 'GREEN'
    END as COMPLIANCE_STATUS,
    CASE 
        WHEN COUNT(CASE WHEN ROTATION_DATE IS NULL OR ROTATION_DATE > EXPIRY_DATE THEN 1 END) > 0 THEN 0
        ELSE 1
    END as NUMERATOR,
    1 as DENOMINATOR
FROM EXPIRED_CERTS;

-- Tier 0 Supporting Evidence Query
-- First CTE: Identify certificates that need rotation within next 3 days
WITH EXPIRED_CERTS AS (
    SELECT 
        c1.Certificate_ID as OLD_CERT_ID,
        c1.Certificate_ARN,
        c1.NOT_VALID_BEFORE_UTC_TIMESTAMP as OLD_CERT_START,
        c1.NOT_VALID_AFTER_UTC_TIMESTAMP as OLD_CERT_EXPIRY,
        c1.LAST_USAGE_OBSERVATION_UTC_TIMESTAMP,
        -- Get the rotation certificate details if they exist
        LEAD(c1.Certificate_ID) OVER (PARTITION BY c1.Certificate_ID ORDER BY c1.NOT_VALID_BEFORE_UTC_TIMESTAMP) as NEW_CERT_ID,
        LEAD(c1.NOT_VALID_BEFORE_UTC_TIMESTAMP) OVER (PARTITION BY c1.Certificate_ID ORDER BY c1.NOT_VALID_BEFORE_UTC_TIMESTAMP) as NEW_CERT_START
    FROM CYBR_DB.PHDP_CYBR.CERTIFICATE_CATALOG_CERTIFICATE_USAGE c1
    WHERE c1.CERTIFICATE_ARN LIKE '%arn:aws:acm%'
    AND c1.NOT_VALID_AFTER_UTC_TIMESTAMP < CURRENT_TIMESTAMP
    AND c1.NOT_VALID_AFTER_UTC_TIMESTAMP >= DATEADD(day, -3, CURRENT_TIMESTAMP)
    AND DATEDIFF(day, c1.NOT_VALID_BEFORE_UTC_TIMESTAMP, c1.NOT_VALID_AFTER_UTC_TIMESTAMP) BETWEEN 350 AND 380
)

SELECT
    OLD_CERT_ID,
    Certificate_ARN,
    OLD_CERT_EXPIRY as EXPIRATION_DATE,
    LAST_USAGE_OBSERVATION_UTC_TIMESTAMP as LAST_OBSERVATION_TIME,
    NEW_CERT_START as ROTATION_DATE,
    CASE 
        WHEN LAST_USAGE_OBSERVATION_UTC_TIMESTAMP > OLD_CERT_EXPIRY AND NEW_CERT_START IS NULL THEN 'Failed - Used After Expiry Without Rotation'
        WHEN NEW_CERT_START IS NOT NULL AND NEW_CERT_START <= OLD_CERT_EXPIRY THEN 'Successfully Rotated'
        WHEN LAST_USAGE_OBSERVATION_UTC_TIMESTAMP <= OLD_CERT_EXPIRY THEN 'Retired/Unused'
        ELSE 'Not Rotated'
    END as CERTIFICATE_STATUS
FROM EXPIRED_CERTS
ORDER BY OLD_CERT_EXPIRY DESC;
