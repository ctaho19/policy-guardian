-- Diagnostic Query to understand the discrepancy
WITH CORRECT_NUMBERS AS (
    SELECT 
        'Correct Numbers' as QUERY_TYPE,
        COUNT(*) as RECORD_COUNT,
        SUM(INVENTORY_COUNT) as TOTAL_INVENTORY,
        SUM(TOTAL_EVALUATED_COUNT) as TOTAL_EVALUATED
    FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
    AND CONTROL_ID = 'control_id'
    AND RESOURCE_TYPE = 'AWS::IAM::Role'
    AND ROLE_TYPE = 'MACHINE'
),
DETAILED_BREAKDOWN AS (
    SELECT 
        ACCOUNT_NUMBER,
        REGION,
        ASV,
        RESOURCE_TYPE,
        ROLE_TYPE,
        COUNT(*) as RECORD_COUNT,
        SUM(INVENTORY_COUNT) as INVENTORY_COUNT,
        SUM(TOTAL_EVALUATED_COUNT) as TOTAL_EVALUATED
    FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
    AND CONTROL_ID = 'control_id'
    GROUP BY 
        ACCOUNT_NUMBER,
        REGION,
        ASV,
        RESOURCE_TYPE,
        ROLE_TYPE
    HAVING SUM(TOTAL_EVALUATED_COUNT) > 0
    ORDER BY SUM(TOTAL_EVALUATED_COUNT) DESC
)
SELECT * FROM CORRECT_NUMBERS
UNION ALL
SELECT 
    'Top Resource Types' as QUERY_TYPE,
    SUM(RECORD_COUNT),
    SUM(INVENTORY_COUNT),
    SUM(TOTAL_EVALUATED)
FROM DETAILED_BREAKDOWN
LIMIT 5;

-- Proposed Fixed Tier 1 Query
WITH RESOURCE_COUNTS AS (
    SELECT 
        SUM(INVENTORY_COUNT) AS TOTAL_RESOURCES,
        SUM(TOTAL_EVALUATED_COUNT) AS EVALUATED_RESOURCES
    FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
    AND CONTROL_ID = 'control_id'
    AND RESOURCE_TYPE = 'AWS::IAM::Role'
    AND ROLE_TYPE = 'MACHINE'
)
SELECT 
    CURRENT_DATE AS DATE,
    'MNTR-XXXXX-T1' AS MONITORING_METRIC_NUMBER,
    ROUND(100.0 * EVALUATED_RESOURCES / NULLIF(TOTAL_RESOURCES, 0), 2) AS MONITORING_METRIC,
    CASE 
        WHEN (EVALUATED_RESOURCES / NULLIF(TOTAL_RESOURCES, 0)) >= 0.9 THEN 'GREEN'
        WHEN (EVALUATED_RESOURCES / NULLIF(TOTAL_RESOURCES, 0)) >= 0.8 THEN 'YELLOW'
        ELSE 'RED'
    END AS COMPLIANCE_STATUS,
    EVALUATED_RESOURCES AS NUMERATOR,
    TOTAL_RESOURCES AS DENOMINATOR
FROM RESOURCE_COUNTS;
