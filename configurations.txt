WITH LATEST_BATCH AS (
    SELECT MAX(BATCH_ID) FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
),
INVENTORY_COUNTS AS (
    -- Resource1's logic for total inventory
    SELECT SUM(INVENTORY_COUNT) AS TOTAL_RESOURCES
    FROM (
        SELECT *, 
               ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER, REGION, ASV, RESOURCE_TYPE ORDER BY BATCH_ID DESC) AS RANK
        FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4 TC
        WHERE BATCH_ID = (SELECT * FROM LATEST_BATCH)
        AND CLOUD_PROVIDER = 'AWS'
        AND ROLE_TYPE = 'MACHINE'
        AND RESOURCE_TYPE = 'AWS::IAM::Role'
        AND INVENTORY_COUNT > 0
        AND LOWER(REGION) IN ('ca-central-1', 'eu-west-1', 'eu-west-2', 'us-east-1', 'us-east-2', 'us-west-2', 'global')
        AND RESOURCE_TYPE IN (
            SELECT DISTINCT RESOURCE_TYPE 
            FROM CLCN_DB.PHDP_CLOUD.LAZER_CONTROLS_V03 LCTRL
            LEFT JOIN CLCN_DB.PHDP_CLOUD.LAZER_COMPONENTS_V03 LCOMP 
                USING (CLOUD_CONTROL_VERSION_ID, BATCH_ID)
            WHERE LCTRL.BATCH_ID = (SELECT * FROM LATEST_BATCH)
            AND ESCALATING
            AND PHASE = 'OPERATIONAL'
            AND RESOURCE_TYPE NOT ILIKE ''
        )
    ) RankedRecords
    WHERE RANK = 1
),
EVALUATION_COUNTS AS (
    -- Resource2's logic for evaluated resources
    SELECT SUM(TOTAL_EVALUATIONS_COUNT) AS EVALUATED_RESOURCES
    FROM (
        SELECT *, 
               ROW_NUMBER() OVER (PARTITION BY ACCOUNT_NUMBER, REGION, ASV, RESOURCE_TYPE ORDER BY BATCH_ID DESC) AS RANK
        FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
        WHERE BATCH_ID = (SELECT * FROM LATEST_BATCH)
        AND CLOUD_PROVIDER = 'AWS'
        AND RESOURCE_TYPE = 'AWS::IAM::Role'
        AND ROLE_TYPE = 'MACHINE'
        AND CONTROL_ID = 'AC-3.AWS.39.V02'
        AND INVENTORY_COUNT > 0
        AND LOWER(REGION) IN ('ca-central-1', 'eu-west-1', 'eu-west-2', 'us-east-1', 'us-east-2', 'us-west-2', 'global')
    ) RankedRecords
    WHERE RANK = 1
)
SELECT 
    i.TOTAL_RESOURCES,
    e.EVALUATED_RESOURCES,
    ROUND(100.0 * e.EVALUATED_RESOURCES / NULLIF(i.TOTAL_RESOURCES, 0), 2) as COVERAGE_PERCENTAGE
FROM INVENTORY_COUNTS i
CROSS JOIN EVALUATION_COUNTS e;
