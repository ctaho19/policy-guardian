# Ozone Cloud Controls Technical Guide

## Overview

This document provides a comprehensive technical explanation of the Ozone Cloud Controls monitoring system. The control framework consists of three interconnected tiers that collectively measure and monitor cloud resource compliance:

- Tier 1: Resource Evaluation Coverage (Are we checking everything we should?)
- Tier 2: Resource Compliance Rate (Of what we checked, what's compliant?)
- Tier 3: SLA Compliance Tracking (Are we fixing issues fast enough?)

## Detailed Breakdown

### Tier 1: Resource Evaluation Coverage

#### Purpose
Measures the percentage of cloud resources that have been evaluated against the control requirements. This tier answers the fundamental question: "Are we evaluating all the resources we should be?"

#### Technical Implementation
1. Latest Data Selection
sql
WITH LATEST_TIMESTAMP AS (
SELECT MAX(SF_LOAD_TIMESTAMP) AS LATEST_TS
FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
)
This CTE ensures we're working with the most recent data by selecting the latest timestamp from our reporting table.

2. Resource Deduplication
sql
RANKRECORDS AS (
SELECT ,
ROW_NUMBER() OVER (
PARTITION BY ACCOUNT_NUMBER, REGION, ASV, RESOURCE_TYPE
ORDER BY BATCH_ID DESC
) AS RANK
FROM [...table]
WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM [...table])
AND SF_LOAD_TIMESTAMP = (SELECT LATEST_TS FROM LATEST_TIMESTAMP)
AND CONTROL_ID = '<your_control_id>'
AND INVENTORY_COUNT >= 0
)
This ranking mechanism prevents duplicate counting by:
- Partitioning data by unique resource identifiers
- Ordering by batch_id to get the latest record
- Filtering out invalid inventory counts

3. Resource Count Calculation
sql
RESOURCE_COUNTS AS (
SELECT
SUM(INVENTORY_COUNT) AS TOTAL_RESOURCES,
SUM(LEAST(EVALUATED_COUNT, INVENTORY_COUNT)) AS EVALUATED_RESOURCES
FROM RANKRECORDS
WHERE RANK = 1
)
Key aspects:
- Uses LEAST() to prevent evaluated count from exceeding inventory
- Only considers rank=1 records to avoid duplicates
- Handles NULL values through appropriate aggregation

#### Success Criteria
- GREEN: â‰¥90% resources evaluated
- YELLOW: 80-89% resources evaluated
- RED: <80% resources evaluated

#### Common Issues and Troubleshooting
1. Missing or Incomplete Data
   - Verify SF_LOAD_TIMESTAMP is current
   - Check for gaps in batch_id sequence
   - Validate inventory_count values

2. Calculation Anomalies
   - Compare evaluated_count against inventory_count
   - Check for negative values
   - Verify partition completeness

[Continue with similar detailed breakdowns for Tier 2 and 3...]

### Tier 2: Resource Compliance Rate

#### Purpose
Calculates the percentage of evaluated resources that meet compliance requirements. This tier answers: "Of the resources we've evaluated, how many are compliant?"

#### Technical Implementation
1. Resource Inventory Collection
sql
RESOURCE_INVENTORY AS (
SELECT
SUM(INVENTORY_COUNT) AS TOTAL_RESOURCES,
COUNT(DISTINCT RESOURCE_TYPE) AS RESOURCE_TYPES_COUNT
FROM [...table]
WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM [...table])
AND CONTROL_ID = '<your_control_id>'
AND INVENTORY_COUNT >= 0
)

2. Non-Compliant Resource Identification
sql
NON_COMPLIANT_RESOURCES AS (
SELECT
COALESCE(COUNT(DISTINCT nc.ID), 0) AS NON_COMPLIANT_COUNT
FROM [...table] nc
WHERE nc.CONTROL_ID = '<your_control_id>'
AND nc.ID NOT IN (
SELECT ID FROM [...closed_resources_table]
)
)
### Tier 2: Resource Compliance Rate (continued)

#### Compliance Rate Calculation
sql
COMPLIANCE_METRICS AS (
SELECT
ri.TOTAL_RESOURCES,
nc.NON_COMPLIANT_COUNT,
ROUND(100.0 (GREATEST(0, ri.TOTAL_RESOURCES - nc.NON_COMPLIANT_COUNT)) /
GREATEST(ri.TOTAL_RESOURCES, nc.NON_COMPLIANT_COUNT), 2) AS RESOURCE_COMPLIANCE_RATE
FROM RESOURCE_INVENTORY ri
CROSS JOIN NON_COMPLIANT_RESOURCES nc
)

Key aspects of the calculation:
- Uses GREATEST() to prevent negative compliance rates
- Rounds to 2 decimal places for reporting
- Handles edge cases through NULL coalescing

#### Supporting Evidence Query
The supporting evidence query provides detailed compliance information at multiple levels:
sql
SELECT
rd.ACCOUNT_NUMBER,
rd.REGION,
rd.ASV,
rd.RESOURCE_TYPE,
rd.EVALUATED_COUNT as TOTAL_RESOURCES,
COALESCE(ncd.NON_COMPLIANT_COUNT, 0) as NON_COMPLIANT_RESOURCES,
GREATEST(0, rd.EVALUATED_COUNT - COALESCE(ncd.NON_COMPLIANT_COUNT, 0)) as COMPLIANT_RESOURCES,
ROUND(100.0 [...calculation...], 2) as COMPLIANCE_PERCENTAGE
FROM [...tables and joins...]

This query provides:
1. Resource Identification
   - Account and region information
   - Application service version (ASV)
   - Resource type classification

2. Compliance Metrics
   - Total resource count
   - Non-compliant resource count
   - Compliant resource calculation
   - Compliance percentage

### Tier 3: SLA Compliance

#### Purpose
Tracks whether non-compliant resources are being remediated within required timeframes based on risk level.

#### Risk-Based SLA Framework
sql
CASE
WHEN DATEDIFF('days', nc.OPEN_DATE_UTC_TIMESTAMP, CURRENT_DATE) > 0
AND nc.CONTROL_RISK = 'Critical' THEN 'PAST DUE'
WHEN DATEDIFF('days', nc.OPEN_DATE_UTC_TIMESTAMP, CURRENT_DATE) > 30
AND nc.CONTROL_RISK = 'High' THEN 'PAST DUE'
WHEN DATEDIFF('days', nc.OPEN_DATE_UTC_TIMESTAMP, CURRENT_DATE) > 60
AND nc.CONTROL_RISK = 'Medium' THEN 'PAST DUE'
WHEN DATEDIFF('days', nc.OPEN_DATE_UTC_TIMESTAMP, CURRENT_DATE) > 90
AND nc.CONTROL_RISK = 'Low' THEN 'PAST DUE'
ELSE 'Within SLA'
END

SLA Windows by Risk Level:
- Critical: Immediate (0 days)
- High: 30 days
- Medium: 60 days
- Low: 90 days

#### Implementation Details
1. Past SLA Resource Identification
sql
PAST_SLA_RESOURCES AS (
SELECT
COALESCE(COUNT(DISTINCT nc.RESOURCE_ID), 0) AS PAST_SLA_COUNT
FROM [...table] nc
WHERE nc.CONTROL_ID = '<your_control_id>'
AND nc.ID NOT IN (SELECT ID FROM [...closed_resources_table])
AND [SLA case statement] = 'PAST DUE'
)

2. Compliance Percentage Calculation
sql
METRIC_CALCULATION AS (
SELECT
CAST(COALESCE(pr.PAST_SLA_COUNT, 0) AS DECIMAL(18,2)) AS PAST_SLA_COUNT,
CAST(COALESCE(li.TOTAL_RESOURCES, 0) AS DECIMAL(18,2)) AS TOTAL_RESOURCES,
CASE
WHEN COALESCE(pr.PAST_SLA_COUNT, 0) = 0 THEN 100.0
ELSE ROUND(100.0 (1 - ([calculation])), 2)
END AS SLA_COMPLIANCE_RATE
FROM [...]
)
## Technical Notes

### Database Objects and Dependencies

1. Primary Tables
   - OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
     * Contains resource inventory and evaluation counts
     * Updated quarterly with rolling data
     * Key fields: BATCH_ID, SF_LOAD_TIMESTAMP, INVENTORY_COUNT
   
   - OZONE_NON_COMPLIANT_RESOURCES_TCRD_VIEW_V01
     * Tracks active non-compliant resources
     * Real-time updates
     * Key fields: RESOURCE_ID, CONTROL_RISK, OPEN_DATE_UTC_TIMESTAMP

   - OZONE_CLOSED_NON_COMPLIANT_RESOURCES_V04
     * Historical record of remediated issues
     * Used for exclusion in active counts
     * Key fields: ID, CLOSE_DATE_UTC_TIMESTAMP

2. Data Flow


### Performance Optimization

1. Query Efficiency
sql
-- Efficient batch selection
WITH LATEST_BATCH AS (
SELECT MAX(BATCH_ID) AS BATCH_ID
FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
)
sql
-- Efficient batch selection
WITH LATEST_BATCH AS (
SELECT MAX(BATCH_ID) AS BATCH_ID
FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
)
sql
-- Example validation query
SELECT
COUNT() as TOTAL_RECORDS,
SUM(CASE WHEN INVENTORY_COUNT < 0 THEN 1 ELSE 0 END) as NEGATIVE_COUNTS,
SUM(CASE WHEN EVALUATED_COUNT > INVENTORY_COUNT THEN 1 ELSE 0 END) as INVALID_EVALUATIONS
FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM ...)


2. Common Data Issues
   - Negative inventory counts
   - Evaluated count exceeding inventory
   - Missing risk ratings
   - Incorrect SLA calculations


