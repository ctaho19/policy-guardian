-- Verification Query to establish baseline numbers
WITH BASE_NUMBERS AS (
    SELECT 
        COUNT(*) as RECORD_COUNT,
        SUM(INVENTORY_COUNT) as TOTAL_INVENTORY,
        SUM(TOTAL_EVALUATED_COUNT) as TOTAL_EVALUATED,
        COUNT(DISTINCT RESOURCE_TYPE) as DISTINCT_RESOURCES,
        COUNT(DISTINCT ROLE_TYPE) as DISTINCT_ROLES
    FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
    AND CONTROL_ID = 'control_id'
),
RANKED_NUMBERS AS (
    SELECT 
        COUNT(*) as RECORD_COUNT,
        SUM(INVENTORY_COUNT) as TOTAL_INVENTORY,
        SUM(TOTAL_EVALUATED_COUNT) as TOTAL_EVALUATED
    FROM (
        SELECT *,
            ROW_NUMBER() OVER (
                PARTITION BY ACCOUNT_NUMBER, REGION, ASV, RESOURCE_TYPE 
                ORDER BY BATCH_ID DESC
            ) AS RANK
        FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
        WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
        AND CONTROL_ID = 'control_id'
    ) ranked
    WHERE RANK = 1
)
SELECT * FROM BASE_NUMBERS
UNION ALL
SELECT * FROM RANKED_NUMBERS;

-- Modified Tier 1 Query
WITH LATEST_TIMESTAMP AS (
    SELECT MAX(SF_LOAD_TIMESTAMP) AS LATEST_TS
    FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
),
RESOURCE_COUNTS AS (
    SELECT 
        SUM(INVENTORY_COUNT) AS TOTAL_RESOURCES,
        SUM(TOTAL_EVALUATED_COUNT) AS EVALUATED_RESOURCES  -- Changed to TOTAL_EVALUATED_COUNT
    FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    WHERE BATCH_ID = (
        SELECT MAX(BATCH_ID) 
        FROM CLCN_DB.PHDP_CLOUD.OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    )
    AND SF_LOAD_TIMESTAMP = (SELECT LATEST_TS FROM LATEST_TIMESTAMP)
    AND CONTROL_ID = '<your_control_id>'
    AND INVENTORY_COUNT >= 0
)
SELECT 
    CURRENT_DATE AS DATE,
    'MNTR-XXXXX-T1' AS MONITORING_METRIC_NUMBER,
    ROUND(100.0 * EVALUATED_RESOURCES / NULLIF(TOTAL_RESOURCES, 0), 2) AS MONITORING_METRIC,
    CASE 
        WHEN (EVALUATED_RESOURCES / NULLIF(TOTAL_RESOURCES, 0)) >= 0.9 THEN 'GREEN'
        WHEN (EVALUATED_RESOURCES / NULLIF(TOTAL_RESOURCES, 0)) >= 0.8 THEN 'YELLOW'
        ELSE 'RED'
    END AS COMPLIANCE_STATUS,
    EVALUATED_RESOURCES AS NUMERATOR,
    TOTAL_RESOURCES AS DENOMINATOR
FROM RESOURCE_COUNTS;
