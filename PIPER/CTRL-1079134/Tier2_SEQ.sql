-- Tier 2 Supporting Data Query
-- Provides detailed analysis of test execution patterns and validates test coverage
WITH LAST_SCAN_DATE AS (
    -- Get most recent scan date within last 3 days
    SELECT MAX(REPORTDATE) AS RECENT_DATE 
    FROM CYBR_DB.PHDP_CYBR.MACIE_CONTROLS_TESTING 
    WHERE REPORTDATE BETWEEN CURRENT_DATE() - 3 AND CURRENT_DATE() - 1
),
HISTORICAL_DATA AS (
    -- Gather historical test patterns over past 14 days
    SELECT
        COUNT(DISTINCT TESTNAME) AS UNIQUE_TESTS,
        COUNT(*) AS TOTAL_TESTS
    FROM CYBR_DB.PHDP_CYBR.MACIE_CONTROLS_TESTING
    WHERE REPORTDATE BETWEEN CURRENT_DATE() - 14 AND CURRENT_DATE() - 1
    GROUP BY REPORTDATE
),
CURRENT_SCAN AS (
    -- Get metrics for most recent scan
    SELECT
        COUNT(DISTINCT TESTNAME) AS UNIQUE_TESTS,
        COUNT(*) AS TOTAL_TESTS,
        SUM(CASE WHEN TESTISSUCCESSFUL = TRUE THEN 1 ELSE 0 END) AS TOTAL_SUCCESSFUL_TESTS
    FROM CYBR_DB.PHDP_CYBR.MACIE_CONTROLS_TESTING
    JOIN LAST_SCAN_DATE LSD ON REPORTDATE = LSD.RECENT_DATE
),
TEST_TYPES AS (
    -- Get list of test types from most recent scan
    SELECT TESTNAME
    FROM CYBR_DB.PHDP_CYBR.MACIE_CONTROLS_TESTING
    JOIN LAST_SCAN_DATE LSD ON REPORTDATE = LSD.RECENT_DATE
    GROUP BY TESTNAME
),
EXPECTED_VALUES AS (
    -- Calculate expected test counts based on historical median values
    SELECT
        MEDIAN(UNIQUE_TESTS) AS EXPECTED_TEST_TYPES,
        MEDIAN(TOTAL_TESTS) AS EXPECTED_TOTAL_TESTS
    FROM HISTORICAL_DATA
)
SELECT
    TT.TESTNAME,
    -- Calculate average resources tested per test type
    ROUND(CS.TOTAL_TESTS / NULLIF(CS.UNIQUE_TESTS, 0), 2) AS CURRENT_RESOURCES_TESTED,
    (SELECT AVG(TOTAL_TESTS / NULLIF(UNIQUE_TESTS, 0)) FROM HISTORICAL_DATA) AS AVG_RESOURCES_TESTED_IN_PAST_2_WEEKS,
    CS.UNIQUE_TESTS,
    CS.TOTAL_TESTS,
    CS.TOTAL_SUCCESSFUL_TESTS,
    -- Validate test coverage matches expected patterns
    CASE 
        WHEN CS.UNIQUE_TESTS = EV.EXPECTED_TEST_TYPES THEN 'ALL SCAN TESTS PRESENT'
        ELSE 'MISSING SCAN TESTS'
    END AS TEST_TYPE_STATUS,
    CASE 
        WHEN CS.TOTAL_TESTS = EV.EXPECTED_TOTAL_TESTS THEN 'CORRECT NUMBER OF DAILY SCANNING TESTS CONDUCTED'
        ELSE 'INCORRECT NUMBER OF DAILY SCANNING TESTS CONDUCTED'
    END AS TEST_COUNT_STATUS,
    LSD.RECENT_DATE AS SCAN_DATE_USED
FROM CURRENT_SCAN CS
JOIN EXPECTED_VALUES EV ON 1=1
JOIN TEST_TYPES TT ON 1=1
JOIN LAST_SCAN_DATE LSD ON 1=1;