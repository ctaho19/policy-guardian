# --- Replace filter_out_of_scope_keys with this corrected version ---
def filter_out_of_scope_keys(resources: List[Dict], desired_fields_for_report: List[str]) -> Tuple[List[Dict], pd.DataFrame]:
    """Filters out resources based on predefined exclusion criteria for KMS keys."""
    in_scope_resources = []
    excluded_resources_data = []
    
    required_filter_fields = {"resourceId", "accountResourceId", "configuration.keyState", "ConfigurationObject.keyManager", "source"} # Use lowercase 'source'
    report_fields = set(desired_fields_for_report) | required_filter_fields 
    
    logger.info(f"Starting filtering of {len(resources)} fetched resources based on exclusion rules...")

    for resource in resources:
        exclude = False
        reason = "N/A"
        
        # --- Exclusion Check 1: Orphaned Keys (Source field - CORRECTED CASE) ---
        source_field = resource.get("source") # Use lowercase 'source'
        if source_field == "CT-AccessDenied":
            exclude = True
            reason = "Source = CT-AccessDenied (Orphaned)"

        # --- Exclusion Check 2 & 3: Configuration List Checks ---
        key_state = "N/A" 
        key_manager = "N/A" 
            
        if not exclude: 
            config_list = resource.get("configurationList", [])
            
            for config in config_list:
                config_name = config.get("configurationName")
                config_value = config.get("configurationValue")

                # --- Store the found values for later use in reporting ---
                if config_name == "configuration.keyState":
                    key_state = config_value if config_value is not None else "N/A" 
                elif config_name == "ConfigurationObject.keyManager": # Note: API might return diff case, adjust if needed
                    key_manager = config_value if config_value is not None else "N/A"
            
            if key_state in ["PendingDeletion", "PendingReplicaDeletion"]:
                exclude = True
                reason = f"KeyState = {key_state} (Pending Deletion/Replica Deletion)"
            elif key_manager == "AWS": # Assuming API returns 'AWS' - verify case if needed
                exclude = True
                reason = "KeyManager = AWS (AWS Managed)"

        # --- Store results ---
        if exclude:
            excluded_info = {}
            # --- Improved report population for excluded items ---
            for field in report_fields:
                 value = "N/A" # Default
                 if field == "source": # Handle top-level source correctly
                     value = resource.get("source", "N/A")
                 elif field.startswith("supplementaryConfiguration."):
                     s_list = resource.get("supplementaryConfiguration", [])
                     item = next((i for i in s_list if i.get("supplementaryConfigurationName") == field), None)
                     if item: value = item.get("supplementaryConfigurationValue", "N/A (Key Found, No Value)")
                     else: value = "N/A (Key Not Found)"
                 elif field.startswith("configuration."):
                     # Use values extracted earlier if available, otherwise search list
                     if field == "configuration.keyState": value = key_state
                     # Check for KeyManager - use the extracted value
                     elif field == "ConfigurationObject.keyManager": value = key_manager 
                     else: # Search configList for other configuration.* fields
                         c_list = resource.get("configurationList", [])
                         item = next((i for i in c_list if i.get("configurationName") == field), None)
                         if item: value = item.get("configurationValue", "N/A (Key Found, No Value)")
                         else: value = "N/A (Key Not Found)"
                 elif '.' in field: 
                     parts = field.split('.', 1)
                     parent, child = parts[0], parts[1]
                     value = resource.get(parent, {}).get(child, "N/A")
                 else: # Other top-level fields like resourceId
                     value = resource.get(field, "N/A")
                 excluded_info[field] = value
            
            excluded_info["exclusionReason"] = reason
            excluded_resources_data.append(excluded_info)
        else:
            in_scope_resources.append(resource)

    # Create DataFrame with columns in a predictable order if possible
    ordered_columns = sorted(list(report_fields)) + ["exclusionReason"]
    excluded_df = pd.DataFrame(excluded_resources_data)
    # Reindex to ensure all columns are present and in order, handling cases where some fields might be totally absent
    excluded_df = excluded_df.reindex(columns=ordered_columns, fill_value="N/A (Column Missing)")

    logger.info(f"Exclusion filtering complete. In-scope: {len(in_scope_resources)}, Excluded: {len(excluded_resources_data)}")
    
    if not excluded_df.empty:
        logger.debug("Exclusion reasons summary:")
        logger.debug(excluded_df['exclusionReason'].value_counts().to_string())
        
    return in_scope_resources, excluded_df





# --- Replace filter_out_of_scope_keys with this corrected version ---
def filter_out_of_scope_keys(resources: List[Dict], desired_fields_for_report: List[str]) -> Tuple[List[Dict], pd.DataFrame]:
    """Filters out resources based on predefined exclusion criteria for KMS keys."""
    in_scope_resources = []
    excluded_resources_data = []
    
    required_filter_fields = {"resourceId", "accountResourceId", "configuration.keyState", "ConfigurationObject.keyManager", "source"} # Use lowercase 'source'
    report_fields = set(desired_fields_for_report) | required_filter_fields 
    
    logger.info(f"Starting filtering of {len(resources)} fetched resources based on exclusion rules...")

    for resource in resources:
        exclude = False
        reason = "N/A"
        
        # --- Exclusion Check 1: Orphaned Keys (Source field - CORRECTED CASE) ---
        source_field = resource.get("source") # Use lowercase 'source'
        if source_field == "CT-AccessDenied":
            exclude = True
            reason = "Source = CT-AccessDenied (Orphaned)"

        # --- Exclusion Check 2 & 3: Configuration List Checks ---
        key_state = "N/A" 
        key_manager = "N/A" 
            
        if not exclude: 
            config_list = resource.get("configurationList", [])
            
            for config in config_list:
                config_name = config.get("configurationName")
                config_value = config.get("configurationValue")

                # --- Store the found values for later use in reporting ---
                if config_name == "configuration.keyState":
                    key_state = config_value if config_value is not None else "N/A" 
                elif config_name == "ConfigurationObject.keyManager": # Note: API might return diff case, adjust if needed
                    key_manager = config_value if config_value is not None else "N/A"
            
            if key_state in ["PendingDeletion", "PendingReplicaDeletion"]:
                exclude = True
                reason = f"KeyState = {key_state} (Pending Deletion/Replica Deletion)"
            elif key_manager == "AWS": # Assuming API returns 'AWS' - verify case if needed
                exclude = True
                reason = "KeyManager = AWS (AWS Managed)"

        # --- Store results ---
        if exclude:
            excluded_info = {}
            # --- Improved report population for excluded items ---
            for field in report_fields:
                 value = "N/A" # Default
                 if field == "source": # Handle top-level source correctly
                     value = resource.get("source", "N/A")
                 elif field.startswith("supplementaryConfiguration."):
                     s_list = resource.get("supplementaryConfiguration", [])
                     item = next((i for i in s_list if i.get("supplementaryConfigurationName") == field), None)
                     if item: value = item.get("supplementaryConfigurationValue", "N/A (Key Found, No Value)")
                     else: value = "N/A (Key Not Found)"
                 elif field.startswith("configuration."):
                     # Use values extracted earlier if available, otherwise search list
                     if field == "configuration.keyState": value = key_state
                     # Check for KeyManager - use the extracted value
                     elif field == "ConfigurationObject.keyManager": value = key_manager 
                     else: # Search configList for other configuration.* fields
                         c_list = resource.get("configurationList", [])
                         item = next((i for i in c_list if i.get("configurationName") == field), None)
                         if item: value = item.get("configurationValue", "N/A (Key Found, No Value)")
                         else: value = "N/A (Key Not Found)"
                 elif '.' in field: 
                     parts = field.split('.', 1)
                     parent, child = parts[0], parts[1]
                     value = resource.get(parent, {}).get(child, "N/A")
                 else: # Other top-level fields like resourceId
                     value = resource.get(field, "N/A")
                 excluded_info[field] = value
            
            excluded_info["exclusionReason"] = reason
            excluded_resources_data.append(excluded_info)
        else:
            in_scope_resources.append(resource)

    # Create DataFrame with columns in a predictable order if possible
    ordered_columns = sorted(list(report_fields)) + ["exclusionReason"]
    excluded_df = pd.DataFrame(excluded_resources_data)
    # Reindex to ensure all columns are present and in order, handling cases where some fields might be totally absent
    excluded_df = excluded_df.reindex(columns=ordered_columns, fill_value="N/A (Column Missing)")

    logger.info(f"Exclusion filtering complete. In-scope: {len(in_scope_resources)}, Excluded: {len(excluded_resources_data)}")
    
    if not excluded_df.empty:
        logger.debug("Exclusion reasons summary:")
        logger.debug(excluded_df['exclusionReason'].value_counts().to_string())
        
    return in_scope_resources, excluded_df






# --- Replace filter_tier2_resources with this corrected version ---
def filter_tier2_resources(resources: List[Dict], config_key: str, expected_config_value: str, fields_for_report: List[str]) -> Tuple[int, pd.DataFrame]:
    """Filter resources based on Tier 2 compliance (config_key == expected_config_value).
       Only considers resources where the key exists (implicitly passed Tier 1).
       Checks supplementaryConfiguration or configurationList based on key prefix."""
    matching_count = 0
    non_matching_resources = []
    
    target_config_name = config_key
    output_config_col_name = config_key

    is_bool_expected = str(expected_config_value).upper() in ['TRUE', 'FALSE']
    if is_bool_expected:
        expected_bool_str = str(expected_config_value).upper()

    for resource in resources:
        config_value_actual = None 
        key_state_val = "N/A" # Store for reporting
        key_manager_val = "N/A" # Store for reporting
        
        # --- Extract KeyState and KeyManager for reporting ---
        config_list_main = resource.get("configurationList", [])
        for item in config_list_main:
            name = item.get("configurationName")
            if name == "configuration.keyState":
                 key_state_val = item.get("configurationValue", "N/A")
            elif name == "ConfigurationObject.keyManager":
                 key_manager_val = item.get("configurationValue", "N/A")

        # --- Parsing logic for the target config_key ---
        if target_config_name.startswith("supplementaryConfiguration."):
            search_list = resource.get("supplementaryConfiguration", [])
            name_key = "supplementaryConfigurationName"
            value_key = "supplementaryConfigurationValue"
        else: # Assumes configuration.* or other
            search_list = config_list_main
            name_key = "configurationName"
            value_key = "configurationValue"
            if not target_config_name.startswith("configuration."):
                 logger.warning(f"Config key '{target_config_name}' does not have expected prefix. Assuming 'configurationList'. Resource ID: {resource.get('resourceId', 'N/A')}")

        target_config = next((item for item in search_list if item.get(name_key) == target_config_name), None)
        if target_config:
            config_value_actual = target_config.get(value_key)

        # --- Tier 2 Check: Key must EXIST and have a value ---
        if config_value_actual is not None: 
            # Key exists, now compare the value
            is_match = False
            if is_bool_expected:
                is_match = str(config_value_actual).upper() == expected_bool_str
            else:
                is_match = str(config_value_actual) == str(expected_config_value)

            if is_match:
                matching_count += 1
            else:
                 # --- Tier 2 Fail: Key exists, but value MISMATCH ---
                 # Populate non-compliant report
                filtered_resource = {}
                # --- Corrected report population (similar to Tier 1) ---
                for field in fields_for_report:
                     value = "N/A" 
                     if field == "source": value = resource.get("source", "N/A")
                     elif field == "configuration.keyState": value = key_state_val
                     elif field == "ConfigurationObject.keyManager": value = key_manager_val
                     elif field.startswith("supplementaryConfiguration."):
                         s_list = resource.get("supplementaryConfiguration", [])
                         item = next((i for i in s_list if i.get("supplementaryConfigurationName") == field), None)
                         if field == target_config_name: value = config_value_actual # Use the value we already found
                         elif item: value = item.get("supplementaryConfigurationValue", "N/A (Key Found, No Value)")
                         else: value = "N/A (Key Not Found)"
                     elif field.startswith("configuration."):
                         c_list = config_list_main
                         item = next((i for i in c_list if i.get("configurationName") == field), None)
                         if field == target_config_name: value = config_value_actual # Use the value we already found
                         elif item: value = item.get("configurationValue", "N/A (Key Found, No Value)")
                         else: value = "N/A (Key Not Found)"
                     elif '.' in field: 
                         parts = field.split('.', 1); parent, child = parts[0], parts[1]
                         value = resource.get(parent, {}).get(child, "N/A")
                     else: # Top-level field
                         value = resource.get(field, "N/A")
                     filtered_resource[field] = value

                # Ensure target key's value is explicitly set
                filtered_resource[output_config_col_name] = config_value_actual # Report the actual non-matching value
                non_matching_resources.append(filtered_resource)
        # else:
            # If config_value_actual is None, the key didn't exist. 
            # This resource already failed Tier 1. Do NOT add to Tier 2 non-compliant list.
            # matching_count remains unchanged.
            
    logger.info(f"Tier 2 Check ({config_key} == {expected_config_value}): Found {matching_count} compliant resources (out of those with the key present).")

    report_columns = list(fields_for_report)
    if output_config_col_name not in report_columns:
         report_columns.append(output_config_col_name)
         
    final_df = pd.DataFrame(non_matching_resources)
    # Reindex to ensure all expected columns are present
    final_df = final_df.reindex(columns=report_columns, fill_value="N/A (Column Missing)")

    return matching_count, final_df
