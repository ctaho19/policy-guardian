import requests
import json
import pandas as pd
import logging
from typing import Dict, List, Optional, Tuple

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("api_search.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# API Endpoints and Auth (replace with your actual token)
AUTH_TOKEN = ""  # Replace with your actual token
BASE_URL = "https://api.cloud.capitalone.com/internal-operations/cloud-service/aws-tooling"
SUMMARY_URL = f"{BASE_URL}/summary-view"
CONFIG_URL = f"{BASE_URL}/search-resource-configurations"

HEADERS = {
    'Accept': 'application/json;v=1.0',
    'Authorization': f'Bearer {AUTH_TOKEN}',
    'Content-Type': 'application/json'
}

# Function to call Summary View Endpoint
def get_summary_count(payload: Dict) -> Optional[int]:
    try:
        response = requests.post(SUMMARY_URL, headers=HEADERS, data=json.dumps(payload), verify=False)
        if response.status_code == 200:
            data = response.json()
            count = data.get("level1List", [{}])[0].get("level1ResourceCount", 0)
            logger.info(f"Summary View count retrieved: {count}")
            return count
        else:
            logger.error(f"Summary View API call failed with status {response.status_code}: {response.text}")
            return None
    except Exception as e:
        logger.error(f"Error in Summary View call: {str(e)}")
        return None

# Function to fetch all resources with pagination
def fetch_all_resources(payload: Dict) -> Tuple[List[Dict], int]:
    all_resources = []
    total_count = 0
    next_record_key = ""

    while True:
        try:
            # Add nextRecordKey to payload if it exists
            if next_record_key:
                payload["nextRecordKey"] = next_record_key

            response = requests.post(CONFIG_URL, headers=HEADERS, data=json.dumps(payload), verify=False)
            if response.status_code == 200:
                data = response.json()
                resources = data.get("resources", [])
                all_resources.extend(resources)
                total_count += len(resources)
                next_record_key = data.get("nextRecordKey", "")

                logger.info(f"Fetched {len(resources)} resources, total so far: {total_count}")

                # Break if no more records
                if not next_record_key or len(resources) == 0:
                    logger.info("No more resources to fetch")
                    break
            else:
                logger.error(f"Config API call failed with status {response.status_code}: {response.text}")
                break
        except Exception as e:
            logger.error(f"Error fetching resources: {str(e)}")
            break

    return all_resources, total_count

# Function to count resources with a specific configuration value
def count_config_value(resources: List[Dict], config_key: str, config_value: str) -> Tuple[int, List[Dict]]:
    matching_resources = []
    count = 0

    for resource in resources:
        config = resource.get("configuration", {})
        if config.get(config_key) == config_value:
            count += 1
            matching_resources.append(resource)

    logger.info(f"Found {count} resources with {config_key} = {config_value}")
    return count, matching_resources

# Main script
def main():
    # Define payloads (adjust as needed)
    summary_payload = {
        "searchParameters": {
            "aggregations": ["resourceType"],
            "configurationList": [{"configurationName": "configuration.issuer", "configurationValue": "Amazon"}],
            "resourceType": "AWS::ACM::Certificate"
        }
    }

    config_payload = {
        "searchParameters": [
            {"resourceType": "AWS::ACM::Certificate"},
            {"configurationList": [{"configurationName": "configuration.issuer", "configurationValue": "Amazon"}]}
        ]
    }

    # Configuration to search for
    CONFIG_KEY = "configuration.Origin"
    CONFIG_VALUE = "AWS_KMS"

    # Step 1: Get summary count
    summary_count = get_summary_count(summary_payload)
    if summary_count is None:
        logger.error("Failed to get summary count. Exiting.")
        return

    # Step 2: Fetch all resources from config endpoint
    all_resources, config_total_count = fetch_all_resources(config_payload)

    # Step 3: Count specific configuration value
    config_value_count, matching_resources = count_config_value(all_resources, CONFIG_KEY, CONFIG_VALUE)

    # Step 4: Create DataFrame for matching resources
    df = pd.DataFrame(matching_resources)
    if not df.empty:
        logger.info(f"DataFrame created with {len(df)} rows")
        print(df.head())  # Preview the DataFrame
    else:
        logger.warning("No matching resources found for DataFrame")

    # Step 5: Compare counts
    logger.info(f"Summary View Total Count: {summary_count}")
    logger.info(f"Config Endpoint Total Count: {config_total_count}")
    logger.info(f"Count of resources with {CONFIG_KEY} = {CONFIG_VALUE}: {config_value_count}")

    if summary_count == config_total_count:
        logger.info("Counts match between Summary View and Config Endpoint")
    else:
        logger.warning(f"Counts mismatch: Summary View ({summary_count}) vs Config Endpoint ({config_total_count})")

    # Optional: Save DataFrame to CSV for inspection
    if not df.empty:
        df.to_csv("matching_resources.csv", index=False)
        logger.info("Saved matching resources to matching_resources.csv")

if __name__ == "__main__":
    main()
