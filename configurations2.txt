import xml.etree.ElementTree as ET
from difflib import SequenceMatcher
import sys
import csv

# Function to extract apps from Mac XML
def extract_mac_apps(xml_file):
    apps = set()
    try:
        tree = ET.parse(xml_file)
        root = tree.getroot()

        for app_group in root.findall('.//ApplicationGroupOSX'):
            for app in app_group.findall('.//ApplicationOSX'):
                app_name = app.get('FileName', '').lower()
                desc = app.get('Description', '').lower()
                if app_name and app_name != '*':
                    apps.add(app_name)
                elif desc and 'any' not in desc:
                    apps.add(desc)
        return apps
    except ET.ParseError as e:
        print(f"Error parsing Mac XML {xml_file}: {e}")
        return set()

# Function to extract apps from Windows XML
def extract_windows_apps(xml_file):
    apps = set()
    try:
        tree = ET.parse(xml_file)
        root = tree.getroot()

        for app_group in root.findall('.//ApplicationGroup'):
            for app in app_group.findall('.//Application'):
                app_name = app.get('FileName', '').lower()
                desc = app.get('Description', '').lower()
                if app_name and app_name != '*':
                    apps.add(app_name)
                elif desc and 'any' not in desc:
                    apps.add(desc)
        return apps
    except ET.ParseError as e:
        print(f"Error parsing Windows XML {xml_file}: {e}")
        return set()

# Partial match function
def is_partial_match(blocked_app, xml_app, threshold=0.75):
    return SequenceMatcher(None, blocked_app.lower(), xml_app.lower()).ratio() >= threshold

# Main comparison function
def compare_blocklist_with_xml(blocklist_file, windows_xml, mac_xml, output_file='blocklist_validation.csv'):
    # Read blocklist
    with open(blocklist_file, 'r') as f:
        blocklist = [line.strip().lower() for line in f if line.strip()]

    # Extract apps
    mac_apps = extract_mac_apps(mac_xml)
    windows_apps = extract_windows_apps(windows_xml)

    # Compare separately
    results = []
    for blocked_app in blocklist:
        mac_match = None
        windows_match = None
        
        for xml_app in mac_apps:
            if is_partial_match(blocked_app, xml_app):
                mac_match = xml_app
                break
        
        for xml_app in windows_apps:
            if is_partial_match(blocked_app, xml_app):
                windows_match = xml_app
                break
        
        results.append({
            'blocklist_app': blocked_app,
            'mac_found': 'Yes' if mac_match else 'No',
            'mac_match': mac_match if mac_match else '',
            'windows_found': 'Yes' if windows_match else 'No',
            'windows_match': windows_match if windows_match else ''
        })

    # Sort results by blocklist_app
    results.sort(key=lambda x: x['blocklist_app'])

    # Write to CSV
    with open(output_file, 'w', newline='') as csvfile:
        fieldnames = [
            'Blocklist Application',
            'Found in Mac XML',
            'Mac XML Match',
            'Found in Windows XML',
            'Windows XML Match'
        ]
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        # Write header
        writer.writeheader()
        
        # Write main table
        for result in results:
            writer.writerow({
                'Blocklist Application': result['blocklist_app'],
                'Found in Mac XML': result['mac_found'],
                'Mac XML Match': result['mac_match'],
                'Found in Windows XML': result['windows_found'],
                'Windows XML Match': result['windows_match']
            })

        # Add blank row
        writer.writerow({field: '' for field in fieldnames})

        # Write summary
        missing_mac = [r['blocklist_app'] for r in results if r['mac_found'] == 'No']
        missing_windows = [r['blocklist_app'] for r in results if r['windows_found'] == 'No']

        writer.writerow({'Blocklist Application': 'Summary', 'Found in Mac XML': ''})
        writer.writerow({'Blocklist Application': f'Apps missing from Mac XML: {len(missing_mac)}'})
        if missing_mac:
            writer.writerow({'Blocklist Application': 'Missing Mac Apps:'})
            for app in sorted(missing_mac):
                writer.writerow({'Blocklist Application': app})
        
        writer.writerow({'Blocklist Application': ''})
        writer.writerow({'Blocklist Application': f'Apps missing from Windows XML: {len(missing_windows)}'})
        if missing_windows:
            writer.writerow({'Blocklist Application': 'Missing Windows Apps:'})
            for app in sorted(missing_windows):
                writer.writerow({'Blocklist Application': app})

    print(f"Results written to {output_file}")

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python script.py blocklist.txt windows.xml mac.xml")
        sys.exit(1)

    blocklist_file = sys.argv[1]
    windows_xml = sys.argv[2]
    mac_xml = sys.argv[3]

    compare_blocklist_with_xml(blocklist_file, windows_xml, mac_xml)
