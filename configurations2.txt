# COMMAND ----------
# MAGIC %md
# MAGIC ## 12. Tier 2 Metrics Calculation
# MAGIC Calculate compliance metrics for evaluated roles using real COMPLIANCE_STATUS data

# COMMAND ----------
def calculate_metrics(tier2_alert_threshold_raw, tier2_warning_threshold_raw, compliant_count, evaluated_count):
    """Pure Python function to calculate metrics with corrected status logic."""
    alert = float(tier2_alert_threshold_raw) if tier2_alert_threshold_raw is not None else None
    warning = float(tier2_warning_threshold_raw) if tier2_warning_threshold_raw is not None else None
    compliant = int(compliant_count)
    evaluated = int(evaluated_count)
    
    if compliant > evaluated:
        logger.error(f"Invalid counts: compliant_count ({compliant}) exceeds evaluated_count ({evaluated})")
        raise ValueError("Compliant count cannot exceed evaluated count")
    
    metric = compliant / evaluated * 100 if evaluated > 0 else 0.0
    metric = round(metric, 2)
    
    status = "GREEN"
    if alert is not None and metric <= alert:
        status = "RED"
    elif warning is not None and metric <= warning and metric > alert:
        status = "YELLOW"
    logger.info(f"Calculated metric: {metric}, status: {status} with alert={alert}, warning={warning}")
    return {
        "metric": metric,
        "status": status,
        "numerator": compliant,
        "denominator": evaluated
    }

try:
    logger.info("Loading Tier 2 thresholds from Snowflake")
    tier2_thresholds_df = spark.read.format(SNOWFLAKE_SOURCE_NAME) \
        .options(**sfOptions) \
        .option("query", tier2_threshold_query) \
        .load()
    
    tier2_thresholds_df.show()
    threshold_data = tier2_thresholds_df.collect()
    logger.info(f"Threshold data collected: {threshold_data}, type: {type(threshold_data)}")
    
    tier2_alert_threshold_raw = threshold_data[0]["ALERT_THRESHOLD"] if threshold_data else None
    tier2_warning_threshold_raw = threshold_data[0]["WARNING_THRESHOLD"] if threshold_data else None
    logger.info(f"Tier 2 Alert threshold: {tier2_alert_threshold_raw}, type: {type(tier2_alert_threshold_raw)}")
    logger.info(f"Tier 2 Warning threshold: {tier2_warning_threshold_raw}, type: {type(tier2_warning_threshold_raw)}")

    logger.info("Loading filtered and evaluated roles")
    if not 'df_filtered' in locals() or df_filtered is None:
        df_filtered = spark.table("filtered_machine_roles")
    if not 'df_evaluated_roles' in locals() or df_evaluated_roles is None:
        df_evaluated_roles = spark.table("evaluated_roles")
    
    logger.info(f"df_filtered count: {df_filtered.count()}")
    logger.info("df_filtered schema: ")
    df_filtered.printSchema()
    logger.info("Sample df_filtered data: ")
    df_filtered.show(5)
    
    logger.info(f"df_evaluated_roles count: {df_evaluated_roles.count()}")
    logger.info("df_evaluated_roles schema: ")
    df_evaluated_roles.printSchema()
    logger.info("Sample df_evaluated_roles data: ")
    df_evaluated_roles.show(5)
    
    filtered_data = [(row["RESOURCE_ID"], row["AMAZON_RESOURCE_NAME"], row["ACCOUNT"], 
                     row["BA"], row["ROLE_TYPE"]) for row in df_filtered.collect()]
    evaluated_data = [(row["RESOURCE_NAME"], row["COMPLIANCE_STATUS"]) for row in df_evaluated_roles.collect()]
    logger.info(f"Filtered data count: {len(filtered_data)}, type: {type(filtered_data)}")
    logger.info(f"Evaluated data count: {len(evaluated_data)}, type: {type(evaluated_data)}")
    logger.info(f"Sample evaluated_data: {evaluated_data[:5]}")

    filtered_map = {row[1]: (row[0], row[2], row[3], row[4]) for row in filtered_data}
    evaluated_compliance = {arn: status for arn, status in evaluated_data}
    evaluated_roles = [
        (resource_id, arn, acc, ba, role_type, status) 
        for arn, status in evaluated_compliance.items() 
        if arn in filtered_map 
        for resource_id, acc, ba, role_type in [filtered_map[arn]]
    ]
    logger.info(f"Evaluated roles count: {len(evaluated_roles)}, type: {type(evaluated_roles)}")
    logger.info(f"Sample evaluated_roles: {evaluated_roles[:5]}")

    # Log the distribution of COMPLIANCE_STATUS
    compliance_statuses = [status for _, _, _, _, _, status in evaluated_roles]
    from collections import Counter
    status_counts = Counter(compliance_statuses)
    logger.info(f"COMPLIANCE_STATUS distribution: {dict(status_counts)}")

    compliant_count = len([status for _, _, _, _, _, status in evaluated_roles 
                         if status not in ["NonCompliant"]])
    evaluated_count = len(evaluated_roles)
    logger.info(f"Compliant count: {compliant_count}, type: {type(compliant_count)}")
    logger.info(f"Evaluated count: {evaluated_count}, type: {type(evaluated_count)}")

    results = calculate_metrics(tier2_alert_threshold_raw, tier2_warning_threshold_raw, compliant_count, evaluated_count)
    logger.info(f"Calculation results: {results}, type: {type(results)}")

    current_date_value = date.today()
    logger.info(f"Current date: {current_date_value}, type: {type(current_date_value)}")

    metrics_data = {
        "DATE": [current_date_value],
        "MONITORING_METRIC_NUMBER": ['MNTR-XXXXX-T2'],
        "MONITORING_METRIC": [results["metric"]],
        "COMPLIANCE_STATUS": [results["status"]],
        "NUMERATOR": [results["numerator"]],
        "DENOMINATOR": [results["denominator"]]
    }
    logger.info(f"Metrics data: {metrics_data}")
    logger.info(f"Metrics data types: {[type(x[0]) for x in metrics_data.values()]}")

    pd_df = pd.DataFrame(metrics_data)
    df_result = spark.createDataFrame(pd_df)
    logger.info("DataFrame created from pandas DataFrame")
    df_result.printSchema()
    logger.info("DataFrame content:")
    df_result.show()

    df_result.createOrReplaceTempView("tier2_metrics")
    df_result.createOrReplaceTempView("evaluated_roles_with_compliance")
    
    # Set and immediately retrieve to confirm
    logger.info(f"Setting tier2_numerator to {results['numerator']}")
    spark.sql(f"SET tier2_numerator = {results['numerator']}")
    logger.info(f"Retrieved tier2_numerator: {spark.conf.get('spark.tier2_numerator')}")
    
    logger.info(f"Setting tier2_denominator to {results['denominator']}")
    spark.sql(f"SET tier2_denominator = {results['denominator']}")
    logger.info(f"Retrieved tier2_denominator: {spark.conf.get('spark.tier2_denominator')}")
    
    logger.info(f"Setting tier2_metric_value to {results['metric']}")
    spark.sql(f"SET tier2_metric_value = {results['metric']}")
    logger.info(f"Retrieved tier2_metric_value: {spark.conf.get('spark.tier2_metric_value')}")
    
    logger.info(f"Setting tier2_compliance_status to {results['status']}")
    spark.sql(f"SET tier2_compliance_status = '{results['status']}'")
    logger.info(f"Retrieved tier2_compliance_status: {spark.conf.get('spark.tier2_compliance_status')}")

except Exception as e:
    logger.error(f"ERROR in Tier 2 metrics calculation: {str(e)}")
    raise





# COMMAND ----------
# MAGIC %md
# MAGIC ## Unit Tests for Tier 3 Metrics Calculation

# COMMAND ----------
def test_tier3_metrics_calculation(spark):
    """Unit test for Tier 3 metrics calculation and DataFrame creation."""
    # Mock Tier 2 metrics
    spark.conf.set("spark.tier2_numerator", "2")
    spark.conf.set("spark.tier2_denominator", "5")  # 5 total, 2 compliant, 3 non-compliant
    
    # Mock evaluated_roles_with_compliance from Tier 2
    mock_evaluated_roles = spark.createDataFrame(
        [("res1", "arn1", "acc1", "ba1", "MACHINE", "Compliant"),
         ("res2", "arn2", "acc2", "ba2", "MACHINE", "NonCompliant"),
         ("res3", "arn3", "acc3", "ba3", "MACHINE", "NonCompliant"),
         ("res4", "arn4", "acc4", "ba4", "MACHINE", "Compliant"),
         ("res5", "arn5", "acc5", "ba5", "MACHINE", "NonCompliant")],
        ["RESOURCE_ID", "ARN", "ACCOUNT", "BA", "ROLE_TYPE", "COMPLIANCE_STATUS"]
    )
    mock_evaluated_roles.createOrReplaceTempView("evaluated_roles_with_compliance")

    # Mock SLA data for non-compliant resources
    mock_sla_data = spark.createDataFrame(
        [("res2", "High", datetime(2025, 2, 1)),   # 35 days old, past SLA (High: 30 days)
         ("res3", "Medium", datetime(2025, 2, 1)),  # 35 days old, within SLA (Medium: 60 days)
         ("res5", "Low", datetime(2025, 2, 1))],   # 35 days old, within SLA (Low: 90 days)
        ["RESOURCE_ID", "CONTROL_RISK", "OPEN_DATE_UTC_TIMESTAMP"]
    )

    # Mock thresholds (empty to test default GREEN)
    mock_thresholds = spark.createDataFrame(
        [],  # Empty DataFrame to simulate missing thresholds
        ["ALERT_THRESHOLD", "WARNING_THRESHOLD"]
    )

    # Get non-compliant count from Tier 2
    tier2_numerator = int(spark.conf.get("spark.tier2_numerator", "0"))
    tier2_denominator = int(spark.conf.get("spark.tier2_denominator", "0"))
    total_non_compliant = tier2_denominator - tier2_numerator

    # Get non-compliant resources
    non_compliant_resources = [(row["RESOURCE_ID"], row["ARN"]) 
                              for row in mock_evaluated_roles.collect() 
                              if row["COMPLIANCE_STATUS"] == "NonCompliant"]
    
    # Simulate SLA data lookup (in real code, this is a Snowflake query)
    sla_data = [(row["RESOURCE_ID"], row["CONTROL_RISK"], row["OPEN_DATE_UTC_TIMESTAMP"]) 
                for row in mock_sla_data.collect()]

    # Calculate past SLA count
    sla_thresholds = {
        "Critical": 0,
        "High": 30,
        "Medium": 60,
        "Low": 90
    }
    current_date = datetime.now()
    past_sla_count = 0
    for _, control_risk, open_date in sla_data:
        if open_date is None or control_risk not in sla_thresholds:
            continue
        days_open = (current_date - open_date).days
        sla_limit = sla_thresholds.get(control_risk, 90)
        if days_open > sla_limit:
            past_sla_count += 1

    # Calculate numerator
    within_sla_count = total_non_compliant - past_sla_count if total_non_compliant >= past_sla_count else 0
    threshold_data = mock_thresholds.collect()
    alert_threshold = threshold_data[0]["ALERT_THRESHOLD"] if threshold_data else None
    warning_threshold = threshold_data[0]["WARNING_THRESHOLD"] if threshold_data else None

    results = calculate_metrics(alert_threshold, warning_threshold, within_sla_count, total_non_compliant)
    
    metrics_data = {
        "DATE": [date.today()],
        "MONITORING_METRIC_NUMBER": ['MNTR-XXXXX-T3'],
        "MONITORING_METRIC": [results["metric"]],
        "COMPLIANCE_STATUS": [results["status"]],
        "NUMERATOR": [results["numerator"]],
        "DENOMINATOR": [results["denominator"]]
    }

    pd_df = pd.DataFrame(metrics_data)
    df_result = spark.createDataFrame(pd_df)

    collected_result = df_result.collect()[0]
    assert collected_result["NUMERATOR"] == 2, f"Expected numerator 2, got {collected_result['NUMERATOR']}"  # 2 within SLA
    assert collected_result["DENOMINATOR"] == 3, f"Expected denominator 3, got {collected_result['DENOMINATOR']}"  # 3 non-compliant
    assert round(collected_result["MONITORING_METRIC"], 2) == 66.67, f"Expected metric ~66.67%, got {collected_result['MONITORING_METRIC']}"
    assert collected_result["COMPLIANCE_STATUS"] == "GREEN", f"Expected status GREEN, got {collected_result['COMPLIANCE_STATUS']}"
    logger.info("Unit test for Tier 3 metrics calculation and DataFrame creation passed!")

# Run unit test
test_tier3_metrics_calculation(spark)
