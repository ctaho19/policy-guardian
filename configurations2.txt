# --- Replace your existing filter_tier1_resources function with this ---
def filter_tier1_resources(resources: List[Dict], config_key: str, fields_for_report: List[str]) -> Tuple[int, pd.DataFrame]:
    """Filter resources based on Tier 1 compliance (non-empty specified config_key)."""
    matching_count = 0
    non_matching_resources = []
    
    target_config_name = config_key # Assume full name like 'configuration.origin' or 'supplementaryConfiguration.KeyRotationStatus' is provided
    output_config_col_name = config_key # Column name for the report DataFrame

    for resource in resources:
        config_list = resource.get("configurationList", [])
        target_config = next((c for c in config_list if c.get("configurationName") == target_config_name), None)
        
        config_value = target_config.get("configurationValue") if target_config else None
        
        # Tier 1 Pass: Value exists and is not just whitespace
        if config_value is not None and str(config_value).strip(): 
            matching_count += 1
        else:
            # Tier 1 Fail: Value is None, empty string, or whitespace
            filtered_resource = {}
            # Populate report fields, handle potential nesting like in filter_out_of_scope
            for field in fields_for_report:
                 if '.' in field:
                     parts = field.split('.', 1)
                     parent, child = parts[0], parts[1]
                     value = "N/A"
                     if parent == "configurationList":
                          config_list_val = resource.get(parent, [])
                          value = next((c.get("configurationValue") for c in config_list_val if c.get("configurationName") == field), "N/A")
                     elif parent in ["configuration", "supplementaryConfiguration"]: 
                          # Get the value by searching configList for the specific key name
                          nested_config = next((c for c in resource.get("configurationList", []) if c.get("configurationName") == field), None)
                          value = nested_config.get("configurationValue") if nested_config else "N/A (Not Found)"
                     else: # Top level or other structure
                          value = resource.get(parent, {}).get(child, "N/A")
                     filtered_resource[field] = value
                 else:
                     filtered_resource[field] = resource.get(field, "N/A")

            # Ensure the specific config key's value is reported correctly
            filtered_resource[output_config_col_name] = config_value if config_value is not None else "N/A (Not Found)"
            non_matching_resources.append(filtered_resource)
            
    logger.info(f"Tier 1 Check ({config_key} non-empty): Found {matching_count} compliant resources.")
    
    report_columns = list(fields_for_report)
    # Ensure the specific config key column exists, even if the list is empty
    if output_config_col_name not in report_columns:
         report_columns.append(output_config_col_name)
         
    return matching_count, pd.DataFrame(non_matching_resources, columns=report_columns) if non_matching_resources else pd.DataFrame(columns=report_columns)

# --- Replace your existing filter_tier2_resources function with this ---
def filter_tier2_resources(resources: List[Dict], config_key: str, expected_config_value: str, fields_for_report: List[str]) -> Tuple[int, pd.DataFrame]:
    """Filter resources based on Tier 2 compliance (config_key == expected_config_value).
       Assumes input `resources` are those potentially compliant (e.g., all in-scope).
    """
    matching_count = 0
    non_matching_resources = []
    
    target_config_name = config_key
    output_config_col_name = config_key

    # Handle boolean comparison robustly (treat 'TRUE'/'FALSE' strings like booleans)
    is_bool_expected = str(expected_config_value).upper() in ['TRUE', 'FALSE']
    if is_bool_expected:
        expected_bool_str = str(expected_config_value).upper()

    for resource in resources:
        config_list = resource.get("configurationList", [])
        target_config = next((c for c in config_list if c.get("configurationName") == target_config_name), None)
        
        config_value_actual = None
        if target_config:
            config_value_actual = target_config.get("configurationValue")

        # Tier 2 Pass Check:
        is_match = False
        if config_value_actual is not None: # Key must exist and have a value for Tier 2 comparison
            if is_bool_expected:
                is_match = str(config_value_actual).upper() == expected_bool_str
            else:
                is_match = str(config_value_actual) == str(expected_config_value)

        if is_match:
            matching_count += 1
        else:
            # Tier 2 Fail: Value exists but doesn't match, OR value doesn't exist (failed T1 implicitly)
            filtered_resource = {}
            # Populate report fields similarly to Tier 1
            for field in fields_for_report:
                 if '.' in field:
                     parts = field.split('.', 1)
                     parent, child = parts[0], parts[1]
                     value = "N/A"
                     if parent == "configurationList":
                         config_list_val = resource.get(parent, [])
                         value = next((c.get("configurationValue") for c in config_list_val if c.get("configurationName") == field), "N/A")
                     elif parent in ["configuration", "supplementaryConfiguration"]:
                          nested_config = next((c for c in resource.get("configurationList", []) if c.get("configurationName") == field), None)
                          value = nested_config.get("configurationValue") if nested_config else "N/A (Not Found)"
                     else:
                          value = resource.get(parent, {}).get(child, "N/A")
                     filtered_resource[field] = value
                 else:
                     filtered_resource[field] = resource.get(field, "N/A")
                     
            # Report the actual value found (or N/A) for the specific config key
            actual_value_str = config_value_actual if config_value_actual is not None else "N/A (Not Found)"
            filtered_resource[output_config_col_name] = actual_value_str
            non_matching_resources.append(filtered_resource)
            
    logger.info(f"Tier 2 Check ({config_key} == {expected_config_value}): Found {matching_count} compliant resources.")

    report_columns = list(fields_for_report)
    if output_config_col_name not in report_columns:
         report_columns.append(output_config_col_name)

    return matching_count, pd.DataFrame(non_matching_resources, columns=report_columns) if non_matching_resources else pd.DataFrame(columns=report_columns)
