# Step 5: Load thresholds and calculate compliance
    logger.info("Step 5: Loading thresholds and calculating compliance...")
    thresholds_df = load_thresholds(spark)
    
    # Default thresholds (update to handle NULL properly)
    default_thresholds = {
        "MNTR-XXXXXXX-T1": {"ALERT_THRESHOLD": 5, "WARNING_THRESHOLD": None},  # Changed from "NULL" to None
        "MNTR-XXXXXXX-T2": {"ALERT_THRESHOLD": 5, "WARNING_THRESHOLD": None}   # Changed from "NULL" to None
    }
    
    if thresholds_df.empty:
        logger.warning("No thresholds loaded. Using defaults.")
        tier1_threshold = default_thresholds[resource_config["tier1_metric_id"]]
        tier2_threshold = default_thresholds[resource_config["tier2_metric_id"]]
    else:
        # Safely get thresholds with fallback to defaults
        tier1_df = thresholds_df[thresholds_df["MONITORING_METRIC_ID"] == resource_config["tier1_metric_id"]]
        tier2_df = thresholds_df[thresholds_df["MONITORING_METRIC_ID"] == resource_config["tier2_metric_id"]]
        
        tier1_threshold = tier1_df.iloc[0].to_dict() if not tier1_df.empty else default_thresholds[resource_config["tier1_metric_id"]]
        tier2_threshold = tier2_df.iloc[0].to_dict() if not tier2_df.empty else default_thresholds[resource_config["tier2_metric_id"]]
        
        logger.info(f"Loaded thresholds - Tier1: {tier1_threshold}, Tier2: {tier2_threshold}")

    # Calculate metrics and compliance status
    tier1_metric = tier1_numerator / config_total_count if config_total_count > 0 else 0
    tier1_status = get_compliance_status(
        tier1_metric,
        float(tier1_threshold["ALERT_THRESHOLD"]),
        float(tier1_threshold["WARNING_THRESHOLD"]) if tier1_threshold["WARNING_THRESHOLD"] not in ["NULL", None, "None"] else None
    )
    
    tier2_denominator = tier1_numerator
    tier2_metric = tier2_numerator / tier2_denominator if tier2_denominator > 0 else 0
    tier2_status = get_compliance_status(
        tier2_metric,
        float(tier2_threshold["ALERT_THRESHOLD"]),
        float(tier2_threshold["WARNING_THRESHOLD"]) if tier2_threshold["WARNING_THRESHOLD"] not in ["NULL", None, "None"] else None
    )



def get_compliance_status(metric: float, alert_threshold: float, warning_threshold: Optional[float] = None) -> str:
    """Determine compliance status based on metric and thresholds.
    
    Args:
        metric: The compliance metric as a decimal (0-1)
        alert_threshold: The alert threshold as a whole number percentage (0-100)
        warning_threshold: Optional warning threshold as a whole number percentage (0-100)
    """
    metric_percentage = metric * 100
    
    if metric_percentage >= alert_threshold:
        return "GREEN"
    elif warning_threshold is not None and metric_percentage >= warning_threshold:
        return "YELLOW"
    else:
        return "RED"
