# ... [previous code up to results calculation]

# Run calculations
results = calculate_metrics(alert_threshold_raw, warning_threshold_raw, evaluated_count, total_count)
logger.info(f"Calculation results: {results}, type: {type(results)}")

# Get current date as a Python object
current_date_value = date.today()
logger.info(f"Current date: {current_date_value}, type: {type(current_date_value)}")

# ... [prepare metrics_data and create df_result]

# Store key metrics as global variables with logging
logger.info(f"Setting tier1_numerator to {results['numerator']}")
spark.sql(f"SET tier1_numerator = {results['numerator']}")
logger.info(f"Setting tier1_denominator to {results['denominator']}")
spark.sql(f"SET tier1_denominator = {results['denominator']}")
logger.info(f"Setting tier1_metric_value to {results['metric']}")
spark.sql(f"SET tier1_metric_value = {results['metric']}")
logger.info(f"Setting tier1_compliance_status to {results['status']}")
spark.sql(f"SET tier1_compliance_status = '{results['status']}'")
​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
# ... [previous code up to results calculation]

# Run calculations
results = calculate_metrics(tier2_alert_threshold_raw, tier2_warning_threshold_raw, compliant_count, evaluated_count)
logger.info(f"Calculation results: {results}, type: {type(results)}")

# Get current date as a Python object
current_date_value = date.today()
logger.info(f"Current date: {current_date_value}, type: {type(current_date_value)}")

# ... [prepare metrics_data and create df_result]

# Store key metrics as global variables with logging
logger.info(f"Setting tier2_numerator to {results['numerator']}")
spark.sql(f"SET tier2_numerator = {results['numerator']}")
logger.info(f"Setting tier2_denominator to {results['denominator']}")
spark.sql(f"SET tier2_denominator = {results['denominator']}")
logger.info(f"Setting tier2_metric_value to {results['metric']}")
spark.sql(f"SET tier2_metric_value = {results['metric']}")
logger.info(f"Setting tier2_compliance_status to {results['status']}")
spark.sql(f"SET tier2_compliance_status = '{results['status']}'")
​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​