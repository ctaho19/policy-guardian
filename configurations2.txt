# Calculate monitoring metric using DataFrame operations
monitoring_metric = lit(round(100.0 * numerator / denominator, 2) if denominator > 0 else 0.0)

# Determine compliance status based on thresholds
compliance_status = when(
    (monitoring_metric <= lit(warning_threshold)) & 
    (lit(warning_threshold).isNotNull()), "RED"
).when(
    (monitoring_metric <= lit(alert_threshold)) & 
    (lit(alert_threshold).isNotNull()), "YELLOW"
).otherwise("GREEN")

# Calculate metrics
numerator = df_filtered.filter(col("IS_EVALUATED") == 1).count()
denominator = df_filtered.count()
monitoring_metric = lit(round(100.0 * numerator / denominator, 2) if denominator > 0 else 0.0)

# Create metrics DataFrame with proper lit() conversions
metrics_data = [(
    current_date(), 
    'MNTR-XXXXX-T1',
    float(monitoring_metric),  # Convert to float for DataFrame creation
    compliance_status,
    numerator,
    denominator
)]


# Calculate Tier 2 metrics
tier2_numerator = compliant_roles.count()
tier2_denominator = evaluated_roles.count()
tier2_metric = lit(round(100.0 * tier2_numerator / tier2_denominator, 2) if tier2_denominator > 0 else 0.0)

# Determine compliance status based on thresholds
tier2_compliance_status = when(
    (tier2_metric <= lit(tier2_warning_threshold)) & 
    (lit(tier2_warning_threshold).isNotNull()), "RED"
).when(
    (tier2_metric <= lit(tier2_alert_threshold)) & 
    (lit(tier2_alert_threshold).isNotNull()), "YELLOW"
).otherwise("GREEN")

# Create Tier 2 metrics DataFrame with proper lit() conversions
tier2_metrics_data = [(
    current_date(), 
    'MNTR-XXXXX-T2',
    float(tier2_metric),  # Convert to float for DataFrame creation
    tier2_compliance_status,
    tier2_numerator,
    tier2_denominator
)]
