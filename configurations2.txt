# COMMAND ----------

# MAGIC %md
# MAGIC ## 14. Tier 3 Metrics Calculation
# MAGIC Calculate SLA compliance metrics for non-compliant resources using Tier 2 non-compliant count

# COMMAND ----------
from pyspark.sql.functions import col
from pyspark.sql.utils import AnalysisException
import logging
from datetime import datetime, date
import pandas as pd

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def calculate_metrics(alert_val, warning_val, numerator, denominator):
    """Pure Python function to calculate metrics with dynamic status logic."""
    alert = float(alert_val) if alert_val is not None else None
    warning = float(warning_val) if warning_val is not None else None
    numerator = int(numerator)
    denominator = int(denominator)
    
    metric = numerator / denominator * 100 if denominator > 0 else 100.0  # 100% if no non-compliant resources
    metric = round(metric, 2)
    
    status = "GREEN"  # Default to GREEN if no thresholds are defined
    if alert is not None and warning is not None:  # Only evaluate status if both thresholds are present
        if metric < alert:
            status = "RED"
        elif metric < warning and metric >= alert:
            status = "YELLOW"
    logger.info(f"Calculated metric: {metric}, status: {status} with alert={alert}, warning={warning}")
    return {
        "metric": metric,
        "status": status,
        "numerator": numerator,
        "denominator": denominator
    }

try:
    # Load Tier 3 thresholds from Snowflake
    logger.info("Loading Tier 3 thresholds from Snowflake")
    tier3_thresholds_df = spark.read.format(SNOWFLAKE_SOURCE_NAME) \
        .options(**sfOptions) \
        .option("query", tier3_threshold_query) \
        .load()
    
    tier3_thresholds_df.show()
    threshold_data = tier3_thresholds_df.collect()
    logger.info(f"Threshold data collected: {threshold_data}, type: {type(threshold_data)}")
    
    tier3_alert_threshold_raw = threshold_data[0]["ALERT_THRESHOLD"] if threshold_data else None
    tier3_warning_threshold_raw = threshold_data[0]["WARNING_THRESHOLD"] if threshold_data else None
    logger.info(f"Tier 3 Alert threshold: {tier3_alert_threshold_raw}, type: {type(tier3_alert_threshold_raw)}")
    logger.info(f"Tier 3 Warning threshold: {tier3_warning_threshold_raw}, type: {type(tier3_warning_threshold_raw)}")

    # Validate that Tier 2 metrics are available
    required_configs = ["spark.tier2_numerator", "spark.tier2_denominator"]
    for config in required_configs:
        try:
            value = spark.conf.get(config)
            logger.info(f"Successfully retrieved {config}: {value}")
        except Exception as e:
            logger.error(f"Required config {config} not found. Ensure Tier 2 Metrics Calculation ran successfully: {str(e)}")
            raise ValueError(f"Required config {config} not found. Ensure Tier 2 Metrics Calculation ran successfully.")

    # Get Tier 2 metrics for non-compliant count
    tier2_numerator = int(spark.conf.get("spark.tier2_numerator", "0"))
    tier2_denominator = int(spark.conf.get("spark.tier2_denominator", "0"))
    total_non_compliant = tier2_denominator - tier2_numerator
    logger.info(f"Retrieved Tier 2 metrics: numerator={tier2_numerator}, denominator={tier2_denominator}, "
                f"total_non_compliant={total_non_compliant}")

    if total_non_compliant <= 0:
        logger.warning("No non-compliant resources found in Tier 2. Setting metric to 100% and status to GREEN.")
        total_non_compliant = 0
        within_sla_count = 0
        results = {
            "metric": 100.0,
            "status": "GREEN",
            "numerator": 0,
            "denominator": 0
        }
    else:
        # Load evaluated roles with compliance from Tier 2
        logger.info("Loading evaluated roles with compliance from Tier 2")
        try:
            spark.sql("SELECT 1 FROM evaluated_roles_with_compliance LIMIT 1")
            df_evaluated_roles = spark.table("evaluated_roles_with_compliance")
            logger.info("evaluated_roles_with_compliance temp view exists and is accessible.")
        except AnalysisException:
            logger.error("evaluated_roles_with_compliance temp view not found. Ensure Tier 2 ran successfully.")
            raise ValueError("evaluated_roles_with_compliance temp view not found. Ensure Tier 2 ran successfully.")
        
        # Extract non-compliant resources
        non_compliant_resources = [(row["RESOURCE_ID"], row["ARN"]) 
                                  for row in df_evaluated_roles.collect() 
                                  if row["COMPLIANCE_STATUS"] == "NonCompliant"]
        logger.info(f"Non-compliant resources from Tier 2: {len(non_compliant_resources)}, type: {type(non_compliant_resources)}")
        logger.info(f"Sample non_compliant_resources: {non_compliant_resources[:5]}")

        if len(non_compliant_resources) != total_non_compliant:
            logger.warning(f"Discrepancy in non-compliant count: Tier 2 calculated {total_non_compliant}, "
                          f"but found {len(non_compliant_resources)} in evaluated_roles_with_compliance")

        # Prepare list of RESOURCE_IDs for querying
        resource_ids = [resource_id for resource_id, _ in non_compliant_resources]
        if not resource_ids:
            logger.info("No non-compliant resources to query for SLA status.")
            within_sla_count = 0
            past_sla_count = 0
        else:
            # Construct a query to get SLA data for these specific resources
            resource_id_list = ",".join([f"'{rid}'" for rid in resource_ids])
            sla_query = f"""
            SELECT 
                RESOURCE_ID,
                CONTROL_RISK,
                OPEN_DATE_UTC_TIMESTAMP
            FROM CLCN_DB.PHDP_CLOUD.OZONE_NON_COMPLIANT_RESOURCES_TCRD_VIEW_V01
            WHERE CONTROL_ID = 'AC-3.AWS.39.v02'
              AND RESOURCE_ID IN ({resource_id_list})
              AND ID NOT IN (
                  SELECT ID 
                  FROM CLCN_DB.PHDP_CLOUD.OZONE_CLOSED_NON_COMPLIANT_RESOURCES_V04
              )
            """
            logger.info("Loading SLA data for non-compliant resources from Snowflake")
            df_sla_data = spark.read.format(SNOWFLAKE_SOURCE_NAME) \
                .options(**sfOptions) \
                .option("query", sla_query) \
                .load()
            
            logger.info(f"df_sla_data count: {df_sla_data.count()}")
            df_sla_data.printSchema()
            logger.info("Sample df_sla_data data:")
            df_sla_data.show(5)
            
            # Convert to Python list
            sla_data = [(row["RESOURCE_ID"], row["CONTROL_RISK"], row["OPEN_DATE_UTC_TIMESTAMP"]) 
                       for row in df_sla_data.collect()]
            logger.info(f"SLA data count: {len(sla_data)}, type: {type(sla_data)}")
            logger.info(f"Sample sla_data: {sla_data[:5]}")

            # Check for missing resources
            found_resource_ids = set(row[0] for row in sla_data)
            missing_resources = [rid for rid in resource_ids if rid not in found_resource_ids]
            if missing_resources:
                logger.warning(f"Missing SLA data for {len(missing_resources)} resources: {missing_resources[:5]}")

            # Calculate days open and determine past SLA status
            sla_thresholds = {
                "Critical": 0,
                "High": 30,
                "Medium": 60,
                "Low": 90
            }
            current_date = datetime.now()
            past_sla_count = 0
            for resource_id, control_risk, open_date in sla_data:
                if open_date is None or control_risk not in sla_thresholds:
                    logger.warning(f"Skipping invalid entry: resource_id={resource_id}, "
                                  f"control_risk={control_risk}, open_date={open_date}")
                    continue
                days_open = (current_date - open_date).days
                sla_limit = sla_thresholds.get(control_risk, 90)  # Default to 90 if risk level unknown
                if days_open > sla_limit:
                    past_sla_count += 1
            
            logger.info(f"Past SLA count: {past_sla_count}, type: {type(past_sla_count)}")

            # Calculate numerator (resources within SLA)
            within_sla_count = total_non_compliant - past_sla_count if total_non_compliant >= past_sla_count else 0
            logger.info(f"Within SLA count: {within_sla_count}, type: {type(within_sla_count)}")

        # Perform metric calculation
        results = calculate_metrics(tier3_alert_threshold_raw, tier3_warning_threshold_raw, 
                                  within_sla_count, total_non_compliant)
        logger.info(f"Calculation results: {results}, type: {type(results)}")

    # Get current date as a Python object
    current_date_value = date.today()
    logger.info(f"Current date: {current_date_value}, type: {type(current_date_value)}")

    # Prepare metrics data as a Python dictionary for pandas DataFrame
    metrics_data = {
        "DATE": [current_date_value],
        "MONITORING_METRIC_NUMBER": ['MNTR-XXXXX-T3'],
        "MONITORING_METRIC": [results["metric"]],
        "COMPLIANCE_STATUS": [results["status"]],
        "NUMERATOR": [results["numerator"]],
        "DENOMINATOR": [results["denominator"]]
    }
    logger.info(f"Metrics data: {metrics_data}")
    logger.info(f"Metrics data types: {[type(x[0]) for x in metrics_data.values()]}")

    # Convert to pandas DataFrame and then to PySpark DataFrame
    pd_df = pd.DataFrame(metrics_data)
    df_result = spark.createDataFrame(pd_df)
    logger.info("DataFrame created from pandas DataFrame")
    df_result.printSchema()
    logger.info("DataFrame content:")
    df_result.show()

    # Register as temp view and store metrics
    df_result.createOrReplaceTempView("tier3_metrics")
    logger.info(f"Setting spark.tier3_numerator to {results['numerator']}")
    spark.conf.set("spark.tier3_numerator", str(results['numerator']))
    logger.info(f"Setting spark.tier3_denominator to {results['denominator']}")
    spark.conf.set("spark.tier3_denominator", str(results['denominator']))
    logger.info(f"Setting spark.tier3_metric_value to {results['metric']}")
    spark.conf.set("spark.tier3_metric_value", str(results['metric']))
    logger.info(f"Setting spark.tier3_compliance_status to {results['status']}")
    spark.conf.set("spark.tier3_compliance_status", results['status'])

except Exception as e:
    logger.error(f"ERROR in Tier 3 metrics calculation: {str(e)}")
    raise

