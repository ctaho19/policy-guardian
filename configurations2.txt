def fetch_all_resources(payload: Dict, limit: Optional[int] = None, validate_only: bool = False, 
                       timeout: int = 60, max_retries: int = 3) -> Tuple[List[Dict], int]:
    all_resources = []
    total_count = 0
    next_record_key = None
    
    # Update fetch_payload to explicitly set higher limit
    fetch_payload = {
        "searchParameters": payload.get("searchParameters", []),
        "responseFields": [
            "accountName", "accountResourceId", "amazonResourceName", "asvName", 
            "awsAccountId", "awsRegion", "businessApplicationName", 
            "environment", "resourceCreationTimestamp", "resourceId", 
            "resourceType", "supplementaryConfiguration",
            "supplementaryConfiguration.KeyRotationStatus"
        ],
        "limit": 1000  # Explicitly set to 1000
    }
    
    if limit:
        fetch_payload["limit"] = min(limit, 1000)


def filter_tier1_resources(resources: List[Dict], config_key: str, fields: List[str]) -> Tuple[int, pd.DataFrame, List[Dict]]:
    """Filter for keys with any KeyRotationStatus value (Tier 1)."""
    matching_resources = []
    non_matching_resources = []
    
    for resource in resources:
        supp_config = resource.get("supplementaryConfiguration", [])
        rotation_config = next(
            (c for c in supp_config if c["supplementaryConfigurationName"] == f"supplementaryConfiguration.{config_key}"), 
            None
        )
        config_value = rotation_config.get("supplementaryConfigurationValue") if rotation_config else None
        
        if config_value and config_value.strip():
            matching_resources.append(resource)  # Store compliant resources
        else:
            filtered_resource = {field: resource.get(field, "N/A") for field in fields}
            filtered_resource[f"supplementaryConfiguration.{config_key}"] = config_value if config_value else "N/A"
            non_matching_resources.append(filtered_resource)
    
    return len(matching_resources), pd.DataFrame(non_matching_resources), matching_resources

def filter_tier2_resources(resources: List[Dict], config_key: str, config_value: str, fields: List[str]) -> Tuple[int, pd.DataFrame]:
    """Filter for keys with KeyRotationStatus = True (Tier 2)."""
    matching_count = 0
    non_matching_resources = []
    
    for resource in resources:  # Now only processing Tier 1 compliant resources
        supp_config = resource.get("supplementaryConfiguration", [])
        rotation_config = next(
            (c for c in supp_config if c["supplementaryConfigurationName"] == f"supplementaryConfiguration.{config_key}"),
            None
        )
        config_value_actual = rotation_config.get("supplementaryConfigurationValue", "N/A") if rotation_config else "N/A"
        
        if config_value_actual.lower() == config_value.lower():
            matching_count += 1
        else:
            filtered_resource = {field: resource.get(field, "N/A") for field in fields}
            filtered_resource[f"supplementaryConfiguration.{config_key}"] = config_value_actual
            non_matching_resources.append(filtered_resource)
    
    return matching_count, pd.DataFrame(non_matching_resources)


    # In main(), update the validation filtering
    tier1_count, tier1_non_compliant_df, tier1_compliant_resources = filter_tier1_resources(
        validation_resources, 
        resource_config["config_key"], 
        resource_config["desired_fields"]
    )
    
    tier2_count, tier2_non_compliant_df = filter_tier2_resources(
        tier1_compliant_resources,  # Only pass compliant resources from Tier 1
        resource_config["config_key"], 
        resource_config["config_value"], 
        resource_config["desired_fields"]
    )

    # Later in the full filtering section
    tier1_numerator, tier1_non_compliant_df, tier1_compliant_resources = filter_tier1_resources(
        all_resources, 
        resource_config["config_key"], 
        resource_config["desired_fields"]
    )
    
    tier2_numerator, tier2_non_compliant_df = filter_tier2_resources(
        tier1_compliant_resources,  # Only pass compliant resources from Tier 1
        resource_config["config_key"], 
        resource_config["config_value"], 
        resource_config["desired_fields"]
    )
