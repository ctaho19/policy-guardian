# --- Add this new function ---
import random # Add import if not already present

def filter_out_of_scope_keys(resources: List[Dict], desired_fields_for_report: List[str]) -> Tuple[List[Dict], pd.DataFrame]:
    """Filters out resources based on predefined exclusion criteria for KMS keys."""
    in_scope_resources = []
    excluded_resources_data = []
    
    # Ensure essential fields for reporting/debugging are included, even if not explicitly asked for in the report output
    # These fields are REQUIRED for the filtering logic itself.
    required_filter_fields = {"resourceId", "accountResourceId", "configuration.keyState", "ConfigurationObject.keyManager", "Source"}
    report_fields = set(desired_fields_for_report) | required_filter_fields # Combine and ensure uniqueness
    
    logger.info(f"Starting filtering of {len(resources)} fetched resources based on exclusion rules...")

    for resource in resources:
        exclude = False
        reason = "N/A"
        
        # --- Exclusion Check 1: Orphaned Keys (Source field) ---
        source_field = resource.get("Source") 
        if source_field == "CT-AccessDenied":
            exclude = True
            reason = "Source = CT-AccessDenied (Orphaned)"

        # --- Exclusion Check 2 & 3: Configuration List Checks (Key State & Key Manager) ---
        key_state = "N/A" # Default if not found
        key_manager = "N/A" # Default if not found
            
        if not exclude: # Only check configurations if not already excluded by Source
            config_list = resource.get("configurationList", [])
            
            for config in config_list:
                config_name = config.get("configurationName")
                config_value = config.get("configurationValue")

                if config_name == "configuration.keyState":
                    key_state = config_value if config_value is not None else "N/A" 
                elif config_name == "ConfigurationObject.keyManager": 
                    key_manager = config_value if config_value is not None else "N/A"
            
            # Check Key State (Using corrected values: PendingDeletion, PendingReplicaDeletion)
            if key_state in ["PendingDeletion", "PendingReplicaDeletion"]:
                exclude = True
                reason = f"KeyState = {key_state} (Pending Deletion/Replica Deletion)"
            
            # Check Key Manager (Only if not excluded by KeyState)
            elif key_manager == "AWS":
                exclude = True
                reason = "KeyManager = AWS (AWS Managed)"

        # --- Store results ---
        if exclude:
            # Create dict for excluded report using fields needed for identification/reasoning
            excluded_info = {}
            for field in report_fields: # Populate based on the combined required+desired fields
                 # Handle potential nested structure access for reporting
                 if '.' in field:
                     parts = field.split('.', 1)
                     parent, child = parts[0], parts[1]
                     value = "N/A"
                     if parent == "configurationList":
                         config_list_val = resource.get(parent, [])
                         value = next((c.get("configurationValue") for c in config_list_val if c.get("configurationName") == field), "N/A")
                     elif parent in ["configuration", "supplementaryConfiguration"]:
                          # Use values already extracted if available, otherwise search configList
                          if field == "configuration.keyState": value = key_state
                          elif field == "ConfigurationObject.keyManager": value = key_manager # Note: This might differ slightly from field name if desired_fields has diff case
                          else: 
                              nested_config = next((c for c in resource.get("configurationList", []) if c.get("configurationName") == field), None)
                              value = nested_config.get("configurationValue") if nested_config else "N/A (Not Found)"
                     else: # Top level or other structure
                          value = resource.get(parent, {}).get(child, "N/A")
                     excluded_info[field] = value
                 else: # Top-level field (like Source, resourceId)
                     excluded_info[field] = resource.get(field, "N/A")

            excluded_info["exclusionReason"] = reason
            excluded_resources_data.append(excluded_info)
        else:
            # If not excluded, add to the list of resources to be processed for compliance
            in_scope_resources.append(resource)

    excluded_df = pd.DataFrame(excluded_resources_data)
    logger.info(f"Exclusion filtering complete. In-scope: {len(in_scope_resources)}, Excluded: {len(excluded_resources_data)}")
    
    if not excluded_df.empty:
        logger.debug("Exclusion reasons summary:")
        logger.debug(excluded_df['exclusionReason'].value_counts().to_string())
        
    return in_scope_resources, excluded_df
