def filter_tier2_resources(resources: List[Dict], config_key: str, config_value: str, fields: List[str]) -> Tuple[int, pd.DataFrame]:
    """Filter resources based on Tier 2 criteria (specific configuration value).
    Only processes resources that passed Tier 1 criteria (have non-empty configuration value).
    """
    matching_count = 0
    non_matching_resources = []
    for resource in resources:
        config_list = resource.get("configurationList", [])
        origin_config = next((c for c in config_list if c["configurationName"] == f"configuration.{config_key}"), None)
        config_value_actual = origin_config.get("configurationValue") if origin_config else None
        
        # Only process resources that pass Tier 1 criteria (have non-empty configuration value)
        if config_value_actual and config_value_actual.strip():
            if config_value_actual == config_value:
                matching_count += 1
            else:
                filtered_resource = {field: resource.get(field, "N/A") for field in fields}
                filtered_resource["configuration.origin"] = config_value_actual
                non_matching_resources.append(filtered_resource)
    
    logger.info(f"Tier 2: {matching_count} keys with {config_key} = {config_value}")
    return matching_count, pd.DataFrame(non_matching_resources) if non_matching_resources else pd.DataFrame(columns=fields)
