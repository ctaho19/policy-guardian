    # Function to safely get threshold value
    def get_threshold_value(df, metric_id, threshold_type):
        # --- !!! ADD THESE CHECKS AT THE START !!! ---
        if df is None or df.empty:
             logger.warning(f"Cannot get threshold for {metric_id}/{threshold_type} because the input DataFrame is empty or None.")
             return None

        # Check if the essential column exists *before* trying to filter
        required_col = "MONITORING_METRIC_ID" 
        if required_col not in df.columns:
            logger.error(f"Required column '{required_col}' not found in threshold DataFrame! Available columns: {df.columns.tolist()}")
            return None # Cannot proceed without this column
        # --- !!! END CHECKS !!! ---

        # --- Existing logic ---
        row = df[df[required_col] == metric_id] # Use variable required_col
        if not row.empty:
            # Check if the target threshold_type column exists
            if threshold_type not in row.columns:
                 logger.warning(f"Column '{threshold_type}' not found in threshold DataFrame for metric {metric_id}. Columns: {row.columns.tolist()}")
                 return None
                 
            value = row.iloc[0][threshold_type]
            # Convert to float if possible, handle various null representations
            if value is None or str(value).upper() in ["NULL", "NONE", ""]:
                return None
            try:
                return float(value)
            except (ValueError, TypeError):
                logger.warning(f"Could not convert threshold '{threshold_type}' value '{value}' for {metric_id} to float. Treating as None.")
                return None
                
        # If no row matched the metric_id after filtering
        logger.warning(f"Threshold definition not found for metric_id '{metric_id}' within the loaded DataFrame.")
        return None # Not found
