def filter_tier1_resources(resources: List[Dict], config_key: str, fields: List[str]) -> Tuple[int, pd.DataFrame]:
    """Filter for keys with any KeyRotationStatus value (Tier 1)."""
    matching_count = 0
    non_matching_resources = []
    
    for resource in resources:
        supp_config = resource.get("supplementaryConfiguration", [])
        config_item = next(
            (c for c in supp_config if c["supplementaryConfigurationName"] == f"supplementaryConfiguration.{config_key}"),
            None
        )
        config_value = config_item.get("supplementaryConfigurationValue") if config_item else None
        
        if config_value and config_value.strip():
            matching_count += 1
        else:
            filtered_resource = {field: resource.get(field, "N/A") for field in fields}
            filtered_resource[f"supplementaryConfiguration.{config_key}"] = config_value if config_value else "N/A"
            non_matching_resources.append(filtered_resource)
    
    return matching_count, pd.DataFrame(non_matching_resources) if non_matching_resources else pd.DataFrame(columns=fields)

def filter_tier2_resources(resources: List[Dict], config_key: str, config_value: str, fields: List[str]) -> Tuple[int, pd.DataFrame]:
    """Filter for keys with KeyRotationStatus = True (Tier 2)."""
    matching_count = 0
    non_matching_resources = []
    
    for resource in resources:
        supp_config = resource.get("supplementaryConfiguration", [])
        config_item = next(
            (c for c in supp_config if c["supplementaryConfigurationName"] == f"supplementaryConfiguration.{config_key}"),
            None
        )
        config_value_actual = config_item.get("supplementaryConfigurationValue", "N/A") if config_item else "N/A"
        
        if config_item and config_value_actual.lower() == config_value.lower():
            matching_count += 1
        else:
            filtered_resource = {field: resource.get(field, "N/A") for field in fields}
            filtered_resource[f"supplementaryConfiguration.{config_key}"] = config_value_actual
            non_matching_resources.append(filtered_resource)
    
    return matching_count, pd.DataFrame(non_matching_resources) if non_matching_resources else pd.DataFrame(columns=fields)


    fetch_payload = {
        "searchParameters": [payload.get("searchParameters", {})],
        "responseFields": [
            "accountName", "accountResourceId", "amazonResourceName", 
            "awsAccountId", "awsRegion", "resourceType", 
            "supplementaryConfiguration",
            "supplementaryConfiguration.KeyRotationStatus"  # Ensure this exact field name
        ],
        "limit": min(limit, 10000) if limit else 10000
    }



    # Sample and validate configuration extraction
    config_values = []
    for i, resource in enumerate(validation_resources[:5]):
        supp_config = resource.get("supplementaryConfiguration", [])
        config_item = next(
            (c for c in supp_config if c["supplementaryConfigurationName"] == f"supplementaryConfiguration.{resource_config['config_key']}"),
            None
        )
        config_value = config_item.get("supplementaryConfigurationValue") if config_item else "N/A"
        config_values.append(config_value)
        logger.debug(f"Sample resource {i}: {resource_config['config_key']} = {config_value}")
