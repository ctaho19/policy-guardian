WITH LATEST_TIMESTAMP AS (
    SELECT MAX(SF_LOAD_TIMESTAMP) AS LATEST_TS
    FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
),
COMPONENT_EVALUATIONS AS (
    -- First get evaluation counts by component within each group
    SELECT 
        ASV,
        ACCOUNT_NUMBER,
        REGION,
        RESOURCE_TYPE,
        CONTROL_COMPONENT,
        SUM(TOTAL_EVALUATIONS_COUNT) as COMPONENT_EVAL_COUNT
    FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
    WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
    AND CLOUD_PROVIDER = 'AWS'
    AND ROLE_TYPE IN ('', 'N/A', 'MACHINE')
    AND CONTROL_ID = '<your_control_id>'
    AND LOWER(REGION) IN ('ca-central-1', 'eu-west-1', 'eu-west-2', 'us-east-1', 'us-east-2', 'us-west-2', 'global')
    GROUP BY 
        ASV,
        ACCOUNT_NUMBER,
        REGION,
        RESOURCE_TYPE,
        CONTROL_COMPONENT
),
AVERAGED_EVALUATIONS AS (
    -- Average the evaluation counts across components
    SELECT 
        ASV,
        ACCOUNT_NUMBER,
        REGION,
        RESOURCE_TYPE,
        ROUND(AVG(COMPONENT_EVAL_COUNT)) as AVG_EVAL_COUNT
    FROM COMPONENT_EVALUATIONS
    GROUP BY 
        ASV,
        ACCOUNT_NUMBER,
        REGION,
        RESOURCE_TYPE
),
INVENTORY_COUNT AS (
    -- Get inventory counts (using your existing logic)
    SELECT SUM(INVENTORY_COUNT) AS TOTAL_RESOURCES
    FROM (
        SELECT *,
        ROW_NUMBER() OVER (
            PARTITION BY ACCOUNT_NUMBER, REGION, ASV, RESOURCE_TYPE 
            ORDER BY BATCH_ID DESC
        ) AS RANK
        FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4
        WHERE BATCH_ID = (SELECT MAX(BATCH_ID) FROM OZONE_QUARTERLY_EXAMINER_REVIEW_TOTAL_COUNTS_REPORT_V01_V4)
        AND [your existing WHERE conditions]
    ) RANKRECORDS
    WHERE RANK = 1
)
-- Final metrics calculation
SELECT 
    CURRENT_DATE AS DATE,
    'MNTR-XXXXX-T1' AS MONITORING_METRIC_NUMBER,
    ROUND(100.0 * SUM(AVG_EVAL_COUNT) / NULLIF((SELECT TOTAL_RESOURCES FROM INVENTORY_COUNT), 0), 2) AS MONITORING_METRIC,
    CASE
        WHEN SUM(AVG_EVAL_COUNT) >= 0.95 * (SELECT TOTAL_RESOURCES FROM INVENTORY_COUNT) THEN 'GREEN'
        WHEN SUM(AVG_EVAL_COUNT) >= 0.90 * (SELECT TOTAL_RESOURCES FROM INVENTORY_COUNT) THEN 'YELLOW'
        ELSE 'RED'
    END AS COMPLIANCE_STATUS,
    SUM(AVG_EVAL_COUNT) AS NUMERATOR,
    (SELECT TOTAL_RESOURCES FROM INVENTORY_COUNT) AS DENOMINATOR
FROM AVERAGED_EVALUATIONS;
