name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION_MAIN: "3.11"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run Black (formatting check)
        run: black --check --diff src tests
        
      - name: Run isort (import sorting check)
        run: isort --check-only --diff src tests
        
      - name: Run flake8 (linting)
        run: flake8 src tests
        
      - name: Run mypy (type checking)
        run: mypy src
        
      - name: Run bandit (security check)
        run: bandit -r src -f json -o bandit-report.json
        
      - name: Upload bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run tests with pytest
        run: |
          pytest --cov=policyguardian --cov-report=xml --cov-report=html --cov-report=term-missing
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == env.PYTHON_VERSION_MAIN && matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run pip-audit (dependency vulnerability check)
        run: pip-audit --format=json --output=pip-audit-report.json
        
      - name: Upload pip-audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: pip-audit-results
          path: pip-audit-report.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Check package
        run: twine check dist/*
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Install package from wheel
        run: |
          pip install dist/*.whl
          
      - name: Test CLI installation
        run: |
          policy-guardian --version
          policy-guardian list-checks
          
      - name: Test with sample file
        run: |
          echo '<?xml version="1.0"?><config><devices><entry name="test"><vsys><entry name="vsys1"><rulebase><security><rules><entry name="test-rule"><from><member>any</member></from><to><member>any</member></to><source><member>any</member></source><destination><member>any</member></destination><service><member>any</member></service><application><member>any</member></application><action>allow</action></entry></rules></security></rulebase></entry></vsys></entry></devices></config>' > test-config.xml
          policy-guardian analyze test-config.xml --output json

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
          
      - name: Build documentation
        run: |
          cd docs
          make html
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [lint, test, security, build, integration-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
      
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  create-executables:
    name: Create Executables
    runs-on: ${{ matrix.os }}
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MAIN }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[gui]"
          pip install pyinstaller
          
      - name: Create CLI executable
        run: |
          pyinstaller --onefile --name policy-guardian-cli src/policyguardian/cli.py
          
      - name: Create GUI executable (non-macOS)
        if: matrix.os != 'macos-latest'
        run: |
          pyinstaller --onefile --windowed --name policy-guardian-gui src/policyguardian/gui.py
          
      - name: Create GUI executable (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --windowed --name policy-guardian-gui src/policyguardian/gui.py
          
      - name: Upload executables
        uses: actions/upload-artifact@v3
        with:
          name: executables-${{ matrix.os }}
          path: dist/

  release-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [create-executables]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Download all executables
        uses: actions/download-artifact@v3
        with:
          pattern: executables-*
          merge-multiple: true
          path: executables/
          
      - name: Upload release assets
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const release = context.payload.release;
            const executablesDir = 'executables';
            
            if (fs.existsSync(executablesDir)) {
              const files = fs.readdirSync(executablesDir);
              
              for (const file of files) {
                const filePath = path.join(executablesDir, file);
                const fileContent = fs.readFileSync(filePath);
                
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                  name: file,
                  data: fileContent
                });
              }
            } 